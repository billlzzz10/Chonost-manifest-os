#!/usr/bin/env python3
"""
Smart File System Analyzer - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏â‡∏•‡∏≤‡∏î
"""

import json
import os
from datetime import datetime, timedelta
from collections import defaultdict, Counter
from file_system_analyzer import FileSystemMCPTool

class SmartAnalyzer:
    def __init__(self, session_id):
        self.tool = FileSystemMCPTool()
        self.session_id = session_id
        self.analysis_results = {}
        
    def analyze_project_structure(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á"""
        print("üß† Smart File System Analysis")
        print("=" * 60)
        
        # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ
        self._detect_project_type()
        
        # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        self._analyze_folder_structure()
        
        # 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        self._analyze_file_patterns()
        
        # 4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        self._analyze_file_relationships()
        
        # 5. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡πÑ‡∏ü‡∏•‡πå
        self._analyze_file_usage_patterns()
        
        # 6. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
        self._analyze_security_risks()
        
        # 7. ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        self._generate_smart_recommendations()
        
    def _detect_project_type(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ"""
        print("\nüîç 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ")
        print("-" * 40)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        key_files = self._get_key_files()
        
        project_type = "Unknown"
        confidence = 0
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Obsidian Vault
        if any('.obsidian' in path for _, path, _ in key_files):
            project_type = "Obsidian Vault"
            confidence = 95
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Web Project
        elif any(ext in ['.html', '.css', '.js'] for _, _, ext in key_files):
            project_type = "Web Project"
            confidence = 85
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Data Project
        elif any(ext in ['.csv', '.json', '.xlsx'] for _, _, ext in key_files):
            project_type = "Data Project"
            confidence = 80
            
        print(f"üìã ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ: {project_type}")
        print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏±‡πà‡∏ô: {confidence}%")
        
        self.analysis_results['project_type'] = {
            'type': project_type,
            'confidence': confidence,
            'key_files': key_files
        }
        
    def _analyze_folder_structure(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        print("\nüìÅ 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå")
        print("-" * 40)
        
        # ‡∏î‡∏π‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        sql = """
        SELECT parent_directory, COUNT(*) as file_count, 
               SUM(file_size) as total_size,
               GROUP_CONCAT(DISTINCT file_extension) as extensions
        FROM files 
        WHERE session_id = ? 
        GROUP BY parent_directory 
        ORDER BY file_count DESC
        LIMIT 15
        """
        
        result = self._execute_sql(sql, [self.session_id])
        
        print("üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:")
        for i, (folder, count, size, exts) in enumerate(result, 1):
            size_mb = size / 1024 / 1024 if size else 0
            print(f"{i:2d}. {folder}")
            print(f"    üìÑ {count} files, {size_mb:.1f} MB")
            print(f"    üìù Extensions: {exts[:50]}...")
            print()
            
        self.analysis_results['folder_structure'] = result
        
    def _analyze_file_patterns(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå"""
        print("\nüìà 3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå")
        print("-" * 40)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        patterns = {
            'documentation': ['.md', '.txt', '.pdf', '.doc', '.docx'],
            'code': ['.py', '.js', '.ts', '.java', '.cpp', '.c', '.html', '.css'],
            'data': ['.csv', '.json', '.xml', '.sql', '.db'],
            'media': ['.jpg', '.png', '.gif', '.mp4', '.mp3', '.wav'],
            'archive': ['.zip', '.rar', '.tar', '.gz', '.7z'],
            'config': ['.config', '.ini', '.yaml', '.yml', '.toml', '.env']
        }
        
        for category, extensions in patterns.items():
            files = self._get_files_by_extensions(extensions)
            if files:
                total_size = sum(size for _, _, size in files)
                print(f"üìÇ {category.title()}: {len(files)} files, {total_size/1024/1024:.1f} MB")
                
        self.analysis_results['file_patterns'] = patterns
        
    def _analyze_file_relationships(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        print("\nüîó 4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        print("-" * 40)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        relationships = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå config ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        config_files = self._get_files_by_extensions(['.json', '.yaml', '.yml', '.config'])
        if config_files:
            print(f"‚öôÔ∏è ‡πÑ‡∏ü‡∏•‡πå Config: {len(config_files)} files")
            relationships.append(('config_files', config_files))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô backup
        backup_patterns = ['backup', 'bak', 'old', 'temp', 'tmp']
        backup_files = self._find_files_by_patterns(backup_patterns)
        if backup_files:
            print(f"üíæ ‡πÑ‡∏ü‡∏•‡πå Backup: {len(backup_files)} files")
            relationships.append(('backup_files', backup_files))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô cache
        cache_patterns = ['cache', 'tmp', 'temp', '.cache']
        cache_files = self._find_files_by_patterns(cache_patterns)
        if cache_files:
            print(f"üóÇÔ∏è ‡πÑ‡∏ü‡∏•‡πå Cache: {len(cache_files)} files")
            relationships.append(('cache_files', cache_files))
            
        self.analysis_results['file_relationships'] = relationships
        
    def _analyze_file_usage_patterns(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå"""
        print("\n‚è∞ 5. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå")
        print("-" * 40)
        
        # ‡∏î‡∏π‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        recent_files = self._get_recent_files(days=7)
        old_files = self._get_old_files(days=90)
        
        print(f"üÜï ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (7 ‡∏ß‡∏±‡∏ô): {len(recent_files)} files")
        print(f"üìÖ ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤ (90 ‡∏ß‡∏±‡∏ô): {len(old_files)} files")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
        unused_files = self._identify_unused_files()
        if unused_files:
            print(f"üö´ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ: {len(unused_files)} files")
            
        self.analysis_results['usage_patterns'] = {
            'recent_files': recent_files,
            'old_files': old_files,
            'unused_files': unused_files
        }
        
    def _analyze_security_risks(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        print("\nüîí 6. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢")
        print("-" * 40)
        
        risks = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        sensitive_patterns = ['password', 'secret', 'key', 'token', 'credential']
        sensitive_files = self._find_files_by_patterns(sensitive_patterns)
        if sensitive_files:
            print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: {len(sensitive_files)} files")
            risks.append(('sensitive_files', sensitive_files))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå executable
        exe_files = self._get_files_by_extensions(['.exe', '.bat', '.cmd', '.ps1'])
        if exe_files:
            print(f"‚ö° ‡πÑ‡∏ü‡∏•‡πå Executable: {len(exe_files)} files")
            risks.append(('executable_files', exe_files))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô malware
        suspicious_patterns = ['virus', 'malware', 'trojan', 'spyware']
        suspicious_files = self._find_files_by_patterns(suspicious_patterns)
        if suspicious_files:
            print(f"üö® ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢: {len(suspicious_files)} files")
            risks.append(('suspicious_files', suspicious_files))
            
        self.analysis_results['security_risks'] = risks
        
    def _generate_smart_recommendations(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        print("\nüéØ 7. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞")
        print("-" * 40)
        
        recommendations = []
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        project_type = self.analysis_results.get('project_type', {}).get('type', 'Unknown')
        
        if project_type == "Obsidian Vault":
            recommendations.extend(self._get_obsidian_recommendations())
        elif project_type == "Web Project":
            recommendations.extend(self._get_web_recommendations())
        else:
            recommendations.extend(self._get_general_recommendations())
            
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        for i, (category, recs) in enumerate(recommendations, 1):
            print(f"\nüìã {category}:")
            for j, rec in enumerate(recs, 1):
                print(f"  {i}.{j} {rec}")
                
        self.analysis_results['recommendations'] = recommendations
        
    def _get_obsidian_recommendations(self):
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Obsidian Vault"""
        recommendations = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö plugins ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ
        plugins = self._get_obsidian_plugins()
        if len(plugins) > 20:
            recommendations.append(("Optimization", "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏•‡∏ö plugins ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ (‡∏°‡∏µ plugins ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏ï‡∏±‡∏ß)"))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå RAR
        rar_files = self._get_files_by_extensions(['.rar'])
        if rar_files:
            recommendations.append(("Archive Management", "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå RAR ‡∏ß‡πà‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
        unnamed_files = self._find_files_by_patterns(['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠', 'untitled', 'new'])
        if unnamed_files:
            recommendations.append(("File Organization", "‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"))
            
        return recommendations
        
    def _get_web_recommendations(self):
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Web Project"""
        recommendations = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå JavaScript ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
        js_files = self._get_files_by_extensions(['.js'])
        if len(js_files) > 50:
            recommendations.append(("Code Organization", "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÉ‡∏ä‡πâ bundler ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå JavaScript"))
            
        return recommendations
        
    def _get_general_recommendations(self):
        """‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        recommendations = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥
        duplicates = self._get_duplicate_files()
        if duplicates:
            recommendations.append(("Storage Optimization", f"‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà {len(duplicates)} ‡∏Å‡∏•‡∏∏‡πà‡∏°"))
            
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤
        old_files = self.analysis_results.get('usage_patterns', {}).get('old_files', [])
        if len(old_files) > 100:
            recommendations.append(("Archive Management", "‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô archive"))
            
        return recommendations
        
    # Helper methods
    def _execute_sql(self, sql, params):
        """Execute SQL query"""
        params_dict = {
            'action': 'query_sql',
            'sql': sql,
            'params': params,
            'session_id': self.session_id
        }
        result = self.tool._run(json.dumps(params_dict))
        return json.loads(result)
        
    def _get_key_files(self):
        """Get key files for project type detection"""
        sql = """
        SELECT file_name, file_path, file_extension 
        FROM files 
        WHERE session_id = ? 
        ORDER BY file_size DESC 
        LIMIT 20
        """
        return self._execute_sql(sql, [self.session_id])
        
    def _get_files_by_extensions(self, extensions):
        """Get files by extensions"""
        ext_list = "', '".join(extensions)
        sql = f"""
        SELECT file_name, file_path, file_size 
        FROM files 
        WHERE session_id = ? AND file_extension IN ('{ext_list}')
        """
        return self._execute_sql(sql, [self.session_id])
        
    def _find_files_by_patterns(self, patterns):
        """Find files by name patterns"""
        pattern_conditions = " OR ".join([f"file_name LIKE '%{pattern}%'" for pattern in patterns])
        sql = f"""
        SELECT file_name, file_path, file_size 
        FROM files 
        WHERE session_id = ? AND ({pattern_conditions})
        """
        return self._execute_sql(sql, [self.session_id])
        
    def _get_recent_files(self, days=7):
        """Get recently modified files"""
        sql = """
        SELECT file_name, file_path, file_size, modified_date 
        FROM files 
        WHERE session_id = ? 
        AND modified_date > datetime('now', '-{} days')
        """.format(days)
        return self._execute_sql(sql, [self.session_id])
        
    def _get_old_files(self, days=90):
        """Get old files"""
        sql = """
        SELECT file_name, file_path, file_size, modified_date 
        FROM files 
        WHERE session_id = ? 
        AND modified_date < datetime('now', '-{} days')
        """.format(days)
        return self._execute_sql(sql, [self.session_id])
        
    def _get_duplicate_files(self):
        """Get duplicate files"""
        sql = """
        SELECT hash_md5, COUNT(*) as count 
        FROM files 
        WHERE session_id = ? AND hash_md5 IS NOT NULL 
        GROUP BY hash_md5 
        HAVING COUNT(*) > 1
        """
        return self._execute_sql(sql, [self.session_id])
        
    def _get_obsidian_plugins(self):
        """Get Obsidian plugins"""
        sql = """
        SELECT file_name, file_path, file_size 
        FROM files 
        WHERE session_id = ? 
        AND file_path LIKE '%.obsidian\\plugins%'
        AND file_name = 'main.js'
        """
        return self._execute_sql(sql, [self.session_id])
        
    def _identify_unused_files(self):
        """Identify potentially unused files"""
        # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
        sql = """
        SELECT file_name, file_path, file_size, modified_date 
        FROM files 
        WHERE session_id = ? 
        AND modified_date < datetime('now', '-30 days')
        AND file_size < 1024
        """
        return self._execute_sql(sql, [self.session_id])

def main():
    session_id = 'scan_1755714528'  # Vault session
    analyzer = SmartAnalyzer(session_id)
    analyzer.analyze_project_structure()
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    with open('smart_analysis_report.json', 'w', encoding='utf-8') as f:
        json.dump(analyzer.analysis_results, f, ensure_ascii=False, indent=2, default=str)
    
    print(f"\nüíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏ô: smart_analysis_report.json")

if __name__ == "__main__":
    main()
