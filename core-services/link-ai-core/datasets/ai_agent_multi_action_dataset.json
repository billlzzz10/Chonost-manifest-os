{
  "dataset_name": "synapse-core-multi-action-agent",
  "description": "ชุดข้อมูลสำหรับ AI Agent ที่ทำงาน 5 อย่างในสถานการณ์เดียว ตาม Synapse-Core API",
  "version": "1.0.0",
  "created_date": "2024-12-19",
  "scenarios": [
    {
      "scenario_id": "scenario_001",
      "name": "การตรวจสอบและซิงค์ข้อมูล Notion แบบครบวงจร",
      "description": "AI Agent จะตรวจสอบฟีเจอร์ Notion sync, ดึงข้อมูลจากฐานข้อมูล, ซิงค์กับ Notion, บันทึกสถานะ, และส่งการแจ้งเตือน",
      "actions": [
        {
          "action_id": "action_001_01",
          "name": "ตรวจสอบฟีเจอร์ Notion Sync",
          "description": "ตรวจสอบว่า Synapse-Core มีฟีเจอร์ notion-sync หรือไม่",
          "language": "TypeScript",
          "code": "const hasNotionSync = synapseCore.hasFeature('notion-sync');\nif (!hasNotionSync) {\n  throw new Error('Notion sync feature not available');\n}",
          "expected_output": "boolean: true/false",
          "error_handling": "throw Error if feature not available"
        },
        {
          "action_id": "action_001_02",
          "name": "ดึงข้อมูลจากฐานข้อมูลเครื่องมือ",
          "description": "ดึงข้อมูลการตั้งค่าและสถานะการซิงค์จากฐานข้อมูล",
          "language": "TypeScript",
          "code": "const toolDatabase = synapseCore.getToolDatabase();\nconst notionConfig = toolDatabase.getConfig('notion');\nconst syncStatus = toolDatabase.getSyncStatus('notion');",
          "expected_output": "object: {config: {...}, status: {...}}",
          "error_handling": "return null if database not accessible"
        },
        {
          "action_id": "action_001_03",
          "name": "ซิงค์ข้อมูลกับ Notion",
          "description": "เรียกใช้ฟังก์ชันซิงค์ข้อมูลกับ Notion API",
          "language": "TypeScript",
          "code": "const syncResult = await synapseCore.syncToolsWithNotion({\n  direction: 'bidirectional',\n  force: false,\n  validate: true\n});",
          "expected_output": "object: {success: boolean, changes: number, errors: []}",
          "error_handling": "catch sync errors and return error details"
        },
        {
          "action_id": "action_001_04",
          "name": "บันทึกสถานะการซิงค์",
          "description": "บันทึกผลลัพธ์การซิงค์ลงในฐานข้อมูล",
          "language": "TypeScript",
          "code": "await synapseCore.saveData('sync_history', {\n  timestamp: new Date().toISOString(),\n  result: syncResult,\n  config: notionConfig\n});",
          "expected_output": "boolean: true/false",
          "error_handling": "log error if save fails"
        },
        {
          "action_id": "action_001_05",
          "name": "ส่งการแจ้งเตือนผลลัพธ์",
          "description": "ส่งการแจ้งเตือนผลลัพธ์การซิงค์ผ่าน Event System",
          "language": "TypeScript",
          "code": "synapseCore.publish('sync_completed', {\n  tool: 'notion',\n  success: syncResult.success,\n  changes: syncResult.changes,\n  timestamp: new Date().toISOString()\n});",
          "expected_output": "void",
          "error_handling": "silent fail if event system unavailable"
        }
      ]
    },
    {
      "scenario_id": "scenario_002",
      "name": "การจัดการข้อมูล Airtable แบบอัตโนมัติ",
      "description": "AI Agent จะตรวจสอบการเชื่อมต่อ Airtable, ดึงข้อมูล, ประมวลผล, อัปเดตฐานข้อมูล, และสร้างรายงาน",
      "actions": [
        {
          "action_id": "action_002_01",
          "name": "ตรวจสอบการเชื่อมต่อ Airtable",
          "description": "ตรวจสอบว่า Airtable API สามารถเชื่อมต่อได้หรือไม่",
          "language": "TypeScript",
          "code": "const airtableStatus = await synapseCore.hasFeature('airtable-sync');\nconst connectionTest = await synapseCore.testConnection('airtable');",
          "expected_output": "object: {available: boolean, connected: boolean}",
          "error_handling": "return false for both if connection fails"
        },
        {
          "action_id": "action_002_02",
          "name": "ดึงข้อมูลจาก Airtable",
          "description": "ดึงข้อมูลล่าสุดจาก Airtable API",
          "language": "TypeScript",
          "code": "const airtableData = await synapseCore.fetchFromTool('airtable', {\n  table: 'projects',\n  limit: 100,\n  sort: [{field: 'updated', direction: 'desc'}]\n});",
          "expected_output": "array: [{id, fields, created, updated}, ...]",
          "error_handling": "return empty array if fetch fails"
        },
        {
          "action_id": "action_002_03",
          "name": "ประมวลผลและแปลงข้อมูล",
          "description": "แปลงข้อมูลจาก Airtable format เป็น Obsidian format",
          "language": "TypeScript",
          "code": "const processedData = airtableData.map(item => ({\n  id: item.id,\n  title: item.fields.name || 'Untitled',\n  content: item.fields.description || '',\n  tags: item.fields.tags || [],\n  status: item.fields.status || 'active',\n  lastModified: item.updated\n}));",
          "expected_output": "array: transformed data objects",
          "error_handling": "filter out invalid items"
        },
        {
          "action_id": "action_002_04",
          "name": "อัปเดตฐานข้อมูลท้องถิ่น",
          "description": "บันทึกข้อมูลที่ประมวลผลแล้วลงในฐานข้อมูลท้องถิ่น",
          "language": "TypeScript",
          "code": "await synapseCore.saveData('airtable_cache', {\n  lastSync: new Date().toISOString(),\n  data: processedData,\n  count: processedData.length\n});",
          "expected_output": "boolean: true/false",
          "error_handling": "throw error if save fails"
        },
        {
          "action_id": "action_002_05",
          "name": "สร้างรายงานการซิงค์",
          "description": "สร้างรายงานสรุปการซิงค์และส่งผ่าน Event System",
          "language": "TypeScript",
          "code": "const report = {\n  tool: 'airtable',\n  timestamp: new Date().toISOString(),\n  recordsProcessed: processedData.length,\n  status: 'completed'\n};\nsynapseCore.publish('data_sync_report', report);",
          "expected_output": "void",
          "error_handling": "log error if publish fails"
        }
      ]
    },
    {
      "scenario_id": "scenario_003",
      "name": "การจัดการ ClickUp Tasks แบบครบวงจร",
      "description": "AI Agent จะตรวจสอบ ClickUp integration, ดึง tasks, อัปเดตสถานะ, ซิงค์กับ Obsidian, และส่งการแจ้งเตือน",
      "actions": [
        {
          "action_id": "action_003_01",
          "name": "ตรวจสอบ ClickUp Integration",
          "description": "ตรวจสอบว่า ClickUp integration พร้อมใช้งาน",
          "language": "TypeScript",
          "code": "const clickupAvailable = synapseCore.hasFeature('clickup-sync');\nconst clickupConfig = synapseCore.getToolDatabase().getConfig('clickup');",
          "expected_output": "object: {available: boolean, config: object}",
          "error_handling": "return null config if not available"
        },
        {
          "action_id": "action_003_02",
          "name": "ดึง Tasks จาก ClickUp",
          "description": "ดึง tasks ที่มีการเปลี่ยนแปลงล่าสุดจาก ClickUp",
          "language": "TypeScript",
          "code": "const tasks = await synapseCore.fetchFromTool('clickup', {\n  endpoint: 'tasks',\n  filters: {\n    status: ['in_progress', 'review'],\n    updated_after: new Date(Date.now() - 24*60*60*1000).toISOString()\n  }\n});",
          "expected_output": "array: ClickUp task objects",
          "error_handling": "return empty array if API call fails"
        },
        {
          "action_id": "action_003_03",
          "name": "อัปเดตสถานะ Tasks",
          "description": "อัปเดตสถานะของ tasks ในฐานข้อมูลท้องถิ่น",
          "language": "TypeScript",
          "code": "const updatedTasks = tasks.map(task => ({\n  id: task.id,\n  name: task.name,\n  status: task.status.status,\n  priority: task.priority,\n  dueDate: task.due_date,\n  assignees: task.assignees\n}));\nawait synapseCore.saveData('clickup_tasks', updatedTasks);",
          "expected_output": "boolean: true/false",
          "error_handling": "throw error if save fails"
        },
        {
          "action_id": "action_003_04",
          "name": "ซิงค์กับ Obsidian Notes",
          "description": "สร้างหรืออัปเดต Obsidian notes สำหรับ tasks ที่เปลี่ยนแปลง",
          "language": "TypeScript",
          "code": "for (const task of updatedTasks) {\n  const noteContent = `# ${task.name}\n\n**Status:** ${task.status}\n**Priority:** ${task.priority}\n**Due Date:** ${task.dueDate}\n**Assignees:** ${task.assignees.join(', ')}\n\n---\nUpdated: ${new Date().toISOString()}`;\n  \n  await synapseCore.createOrUpdateNote({\n    path: `ClickUp/${task.name}.md`,\n    content: noteContent,\n    tags: ['clickup', 'task', task.status]\n  });\n}",
          "expected_output": "array: created/updated note paths",
          "error_handling": "continue loop even if individual note fails"
        },
        {
          "action_id": "action_003_05",
          "name": "ส่งการแจ้งเตือนการอัปเดต",
          "description": "ส่งการแจ้งเตือนการอัปเดต tasks ผ่าน Event System",
          "language": "TypeScript",
          "code": "synapseCore.publish('clickup_tasks_updated', {\n  count: updatedTasks.length,\n  timestamp: new Date().toISOString(),\n  tasks: updatedTasks.map(t => ({id: t.id, name: t.name, status: t.status}))\n});",
          "expected_output": "void",
          "error_handling": "silent fail if event system unavailable"
        }
      ]
    },
    {
      "scenario_id": "scenario_004",
      "name": "การจัดการข้อมูลแบบ Batch Processing",
      "description": "AI Agent จะตรวจสอบข้อมูลทั้งหมด, ประมวลผลแบบ batch, สร้าง backup, อัปเดต indexes, และส่งรายงาน",
      "actions": [
        {
          "action_id": "action_004_01",
          "name": "ตรวจสอบข้อมูลทั้งหมดในระบบ",
          "description": "ตรวจสอบสถานะของข้อมูลทั้งหมดในฐานข้อมูล",
          "language": "TypeScript",
          "code": "const allData = await synapseCore.getToolDatabase().getAllData();\nconst dataStats = {\n  totalRecords: Object.keys(allData).length,\n  lastSync: allData.last_sync || null,\n  tools: Object.keys(allData).filter(key => key !== 'last_sync')\n};",
          "expected_output": "object: {totalRecords: number, lastSync: string, tools: array}",
          "error_handling": "return empty stats if database error"
        },
        {
          "action_id": "action_004_02",
          "name": "ประมวลผลข้อมูลแบบ Batch",
          "description": "ประมวลผลข้อมูลทั้งหมดในรูปแบบ batch เพื่อเพิ่มประสิทธิภาพ",
          "language": "TypeScript",
          "code": "const batchResults = await Promise.allSettled(\n  dataStats.tools.map(async (tool) => {\n    const toolData = allData[tool];\n    return await synapseCore.processBatchData(tool, toolData);\n  })\n);\nconst successfulTools = batchResults\n  .map((result, index) => result.status === 'fulfilled' ? dataStats.tools[index] : null)\n  .filter(Boolean);",
          "expected_output": "array: successfully processed tool names",
          "error_handling": "continue processing even if some tools fail"
        },
        {
          "action_id": "action_004_03",
          "name": "สร้าง Backup ข้อมูล",
          "description": "สร้าง backup ของข้อมูลทั้งหมดก่อนการอัปเดต",
          "language": "TypeScript",
          "code": "const backupId = `backup_${Date.now()}`;\nconst backupData = {\n  id: backupId,\n  timestamp: new Date().toISOString(),\n  data: allData,\n  version: synapseCore.getVersion()\n};\nawait synapseCore.saveData('backups', backupData);",
          "expected_output": "string: backup ID",
          "error_handling": "throw error if backup fails"
        },
        {
          "action_id": "action_004_04",
          "name": "อัปเดต Indexes และ Metadata",
          "description": "อัปเดต indexes และ metadata สำหรับการค้นหา",
          "language": "TypeScript",
          "code": "await synapseCore.updateIndexes({\n  tools: successfulTools,\n  force: false,\n  optimize: true\n});\nawait synapseCore.updateMetadata({\n  lastIndexUpdate: new Date().toISOString(),\n  indexedTools: successfulTools\n});",
          "expected_output": "object: {indexesUpdated: boolean, metadataUpdated: boolean}",
          "error_handling": "return false for failed operations"
        },
        {
          "action_id": "action_004_05",
          "name": "ส่งรายงานการประมวลผล",
          "description": "ส่งรายงานสรุปการประมวลผล batch ผ่าน Event System",
          "language": "TypeScript",
          "code": "const batchReport = {\n  timestamp: new Date().toISOString(),\n  totalTools: dataStats.tools.length,\n  successfulTools: successfulTools.length,\n  backupId: backupId,\n  indexesUpdated: true,\n  processingTime: Date.now() - startTime\n};\nsynapseCore.publish('batch_processing_completed', batchReport);",
          "expected_output": "void",
          "error_handling": "log error if publish fails"
        }
      ]
    },
    {
      "scenario_id": "scenario_005",
      "name": "การจัดการ Event System แบบครบวงจร",
      "description": "AI Agent จะตั้งค่า event listeners, จัดการ events, บันทึก logs, ส่ง notifications, และ cleanup",
      "actions": [
        {
          "action_id": "action_005_01",
          "name": "ตั้งค่า Event Listeners",
          "description": "ตั้งค่า event listeners สำหรับ events ต่างๆ ในระบบ",
          "language": "TypeScript",
          "code": "const eventHandlers = {\n  'sync_completed': (data) => handleSyncCompleted(data),\n  'data_sync_report': (data) => handleDataSyncReport(data),\n  'clickup_tasks_updated': (data) => handleTasksUpdated(data),\n  'batch_processing_completed': (data) => handleBatchCompleted(data)\n};\n\nObject.entries(eventHandlers).forEach(([event, handler]) => {\n  synapseCore.subscribe(event, handler);\n});",
          "expected_output": "array: subscribed event names",
          "error_handling": "log error for each failed subscription"
        },
        {
          "action_id": "action_005_02",
          "name": "จัดการ Events ที่เข้ามา",
          "description": "ประมวลผล events ที่เข้ามาและดำเนินการตามประเภท",
          "language": "TypeScript",
          "code": "const handleSyncCompleted = async (data) => {\n  const logEntry = {\n    type: 'sync_completed',\n    timestamp: new Date().toISOString(),\n    tool: data.tool,\n    success: data.success,\n    changes: data.changes\n  };\n  await synapseCore.saveData('event_logs', logEntry);\n  return logEntry;\n};",
          "expected_output": "object: processed event data",
          "error_handling": "return null if processing fails"
        },
        {
          "action_id": "action_005_03",
          "name": "บันทึก Event Logs",
          "description": "บันทึก logs ของ events ทั้งหมดลงในฐานข้อมูล",
          "language": "TypeScript",
          "code": "const logEvent = async (eventType, data) => {\n  const logEntry = {\n    id: `log_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    eventType,\n    timestamp: new Date().toISOString(),\n    data,\n    processed: true\n  };\n  await synapseCore.saveData('event_logs', logEntry);\n  return logEntry.id;\n};",
          "expected_output": "string: log entry ID",
          "error_handling": "throw error if log save fails"
        },
        {
          "action_id": "action_005_04",
          "name": "ส่ง Notifications",
          "description": "ส่ง notifications ตามประเภทของ events",
          "language": "TypeScript",
          "code": "const sendNotification = async (eventType, data) => {\n  const notification = {\n    type: eventType,\n    title: getNotificationTitle(eventType),\n    message: getNotificationMessage(eventType, data),\n    priority: getNotificationPriority(eventType),\n    timestamp: new Date().toISOString()\n  };\n  \n  synapseCore.publish('notification', notification);\n  return notification;\n};",
          "expected_output": "object: notification object",
          "error_handling": "return null if notification fails"
        },
        {
          "action_id": "action_005_05",
          "name": "Cleanup และ Maintenance",
          "description": "ทำความสะอาด logs เก่าและบำรุงรักษาระบบ",
          "language": "TypeScript",
          "code": "const cleanupOldLogs = async () => {\n  const cutoffDate = new Date(Date.now() - 30*24*60*60*1000); // 30 days ago\n  const oldLogs = await synapseCore.getToolDatabase().getLogsBefore(cutoffDate);\n  \n  for (const log of oldLogs) {\n    await synapseCore.deleteData('event_logs', log.id);\n  }\n  \n  return oldLogs.length;\n};",
          "expected_output": "number: number of cleaned logs",
          "error_handling": "return 0 if cleanup fails"
        }
      ]
    }
  ],
  "metadata": {
    "total_scenarios": 5,
    "total_actions": 25,
    "languages_used": ["TypeScript"],
    "features_covered": [
      "notion-sync",
      "airtable-sync", 
      "clickup-sync",
      "batch-processing",
      "event-system"
    ],
    "api_methods_used": [
      "hasFeature()",
      "getToolDatabase()",
      "syncToolsWithNotion()",
      "saveData()",
      "loadData()",
      "subscribe()",
      "publish()",
      "fetchFromTool()",
      "createOrUpdateNote()",
      "processBatchData()",
      "updateIndexes()",
      "updateMetadata()"
    ]
  }
}
