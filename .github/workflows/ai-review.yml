name: AI Code Review via MANUS API

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  ai-review:
    if: |
      contains(github.event.comment.body, '@manus') &&
      github.event.comment.user.login == 'billzzz10' &&
      (github.event.issue.pull_request != null || github.event.pull_request != null)

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read
      issues: write

    steps:
      - name: Get PR Number
        id: pr-info
        run: |
          if [ "${{ github.event.issue.pull_request }}" != "" ]; then
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get PR Details and Diff
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const maxFiles = 20;
            const maxPatchSize = 10000;

            let diffContent = '';
            diffContent += `Pull Request #${prNumber}: ${pr.title}\n\n`;
            diffContent += `Description: ${pr.body || 'No description provided'}\n\n`;
            diffContent += `Branch: ${pr.head.ref} ‚Üí ${pr.base.ref}\n`;
            diffContent += `Files changed: ${files.length}\n`;
            diffContent += `Additions: +${pr.additions} | Deletions: -${pr.deletions}\n\n`;
            diffContent += '---\n\n';

            const limitedFiles = files.slice(0, maxFiles);

            for (const file of limitedFiles) {
              diffContent += `File: ${file.filename}\n`;
              diffContent += `Status: ${file.status} | Changes: +${file.additions} -${file.deletions}\n\n`;

              if (file.patch) {
                const patch = file.patch.length > maxPatchSize 
                  ? file.patch.substring(0, maxPatchSize) + '\n... (‡∏ï‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î)'
                  : file.patch;
                diffContent += `${patch}\n\n`;
              } else {
                diffContent += '(‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏ö‡∏ô‡∏≤‡∏£‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)\n\n';
              }
              diffContent += '---\n\n';
            }

            if (files.length > maxFiles) {
              diffContent += `‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ${maxFiles} ‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${files.length} ‡πÑ‡∏ü‡∏•‡πå\n`;
            }

            const fs = require('fs');
            fs.writeFileSync('pr_diff.txt', diffContent);

            core.setOutput('pr_title', pr.title);
            core.setOutput('files_count', files.length);

      - name: ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              body: 'ü§ñ **‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î‡∏î‡πâ‡∏ß‡∏¢ MANUS API...**\n\n‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${{ steps.pr-details.outputs.files_count }} ‡πÑ‡∏ü‡∏•‡πå'
            });

      - name: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å MANUS API
        id: ai-review
        env:
          MANUS_API_KEY: ${{ secrets.MANUS_API_KEY }}
        run: |
          DIFF_CONTENT=$(cat pr_diff.txt)

          USER_PROMPT="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡∏ß‡∏¥‡∏ß pull request ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:

          1. **‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°**: ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏∞‡πÑ‡∏£
          2. **‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏Ñ‡πâ‡∏î**: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤
          3. **‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô**: bug, logic ‡∏ú‡∏¥‡∏î, edge case
          4. **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢**: ‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
          5. **‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û**: ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
          6. **‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ**: ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
          7. **‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏à‡∏∏‡∏î**: ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÑ‡∏´‡∏ô‡∏Ñ‡∏ß‡∏£‡πÅ‡∏Å‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö

          ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ markdown ‡∏û‡∏£‡πâ‡∏≠‡∏° emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢

          ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:

          $DIFF_CONTENT"

          JSON_PAYLOAD=$(jq -n \
            --arg key "$MANUS_API_KEY" \
            --arg input "$USER_PROMPT" \
            '{api_key: $key, input: $input}')

          RESPONSE=$(curl -s -X POST \
            https://api.manus.ai/review \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD")

          echo "API Response received"

          REVIEW_CONTENT=$(echo "$RESPONSE" | jq -r '.content // empty')

          if [ -z "$REVIEW_CONTENT" ]; then
            echo "Error: No content in response"
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error.message // "Unknown error"')
            echo "Error message: $ERROR_MSG"

            echo "review_result=‚ùå **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î**: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ\n\n‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: $ERROR_MSG" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "review_result<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "‚úÖ ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå"

      - name: ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ú‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const reviewResult = `${{ steps.ai-review.outputs.review_result }}`;

            let body = '## ü§ñ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏î‡∏¢ AI\n\n';

            if (reviewResult && reviewResult.trim() !== '' && !reviewResult.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')) {
              body += reviewResult;
              body += '\n\n---\n';
              body += '**‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:** MANUS API\n';
              body += '**‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°:** External API\n';
              body += '\nüí° *‡∏û‡∏¥‡∏°‡∏û‡πå `@manus` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á*';
            } else if (reviewResult && reviewResult.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î')) {
              body += reviewResult;
              body += '\n\n---\n';
              body += '**‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:**\n';
              body += '- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API Key ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤\n';
              body += '- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå MANUS ‡∏¢‡∏±‡∏á‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå\n';
              body += '- ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå `@manus` ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            } else {
              body += '‚ö†Ô∏è **‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏**\n\n';
              body += '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              body: body
            });
