#!/usr/bin/env python3
"""
Unified File System MCP Chat App
‡πÅ‡∏≠‡∏õ‡πÅ‡∏ä‡∏ï‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, filedialog, messagebox
import json
import threading
import time
import subprocess
import requests
import os
import sys
from datetime import datetime
from pathlib import Path
from core.file_system_analyzer import FileSystemMCPTool

class UnifiedChatApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ File System MCP - Unified Chat")
        self.root.geometry("1400x900")
        self.root.configure(bg='#1e1e1e')
        
        # Force window to front and make it copyable
        self.root.lift()
        self.root.attributes('-topmost', True)
        self.root.after_idle(self.root.attributes, '-topmost', False)
        
        # Initialize components
        self.tool = FileSystemMCPTool()
        self.current_session_id = None
        self.scanning = False
        self.ollama_connected = False
        self.ollama_client = None
        
        # Setup UI
        self.setup_ui()
        self.setup_styles()
        
        # Auto-start services
        self.auto_start_services()
        
    def setup_styles(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á UI"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure colors for dark theme
        style.configure('Dark.TFrame', background='#1e1e1e')
        style.configure('Dark.TLabel', background='#1e1e1e', foreground='#ffffff')
        style.configure('Dark.TButton', 
                       background='#007acc', 
                       foreground='white',
                       font=('Segoe UI', 10, 'bold'))
        
    def setup_ui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á UI ‡∏´‡∏•‡∏±‡∏Å"""
        # Main container
        main_frame = ttk.Frame(self.root, style='Dark.TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=15, pady=15)
        
        # Header with status
        self.setup_header(main_frame)
        
        # Split view: Chat and Control Panel
        paned_window = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        paned_window.pack(fill=tk.BOTH, expand=True, pady=(10, 0))
        
        # Left side: Chat area
        self.setup_chat_area(paned_window)
        
        # Right side: Control panel
        self.setup_control_panel(paned_window)
        
        # Input area at bottom
        self.setup_input_area(main_frame)
        
    def setup_header(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"""
        header_frame = ttk.Frame(parent, style='Dark.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Title
        title_label = tk.Label(header_frame, 
                              text="üöÄ File System MCP - Unified Chat", 
                              font=('Segoe UI', 18, 'bold'),
                              fg='#ffffff',
                              bg='#1e1e1e')
        title_label.pack(side=tk.LEFT)
        
        # Status indicators
        status_frame = tk.Frame(header_frame, bg='#1e1e1e')
        status_frame.pack(side=tk.RIGHT)
        
        # File System Status
        self.fs_status = tk.Label(status_frame,
                                 text="üìÅ File System: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...",
                                 font=('Segoe UI', 9),
                                 fg='#ffaa00',
                                 bg='#1e1e1e')
        self.fs_status.pack(side=tk.LEFT, padx=(0, 10))
        
        # Ollama Status
        self.ollama_status = tk.Label(status_frame,
                                     text="ü§ñ Ollama: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...",
                                     font=('Segoe UI', 9),
                                     fg='#ffaa00',
                                     bg='#1e1e1e')
        self.ollama_status.pack(side=tk.LEFT, padx=(0, 10))
        
        # Session Status
        self.session_status = tk.Label(status_frame,
                                      text="üíæ Session: ‡πÑ‡∏°‡πà‡∏°‡∏µ",
                                      font=('Segoe UI', 9),
                                      fg='#cccccc',
                                      bg='#1e1e1e')
        self.session_status.pack(side=tk.LEFT)
        
    def setup_chat_area(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏ï"""
        chat_frame = ttk.Frame(parent, style='Dark.TFrame')
        parent.add(chat_frame, weight=3)
        
        # Chat display with copy functionality
        self.chat_display = scrolledtext.ScrolledText(
            chat_frame,
            wrap=tk.WORD,
            font=('Consolas', 11),
            bg='#2d2d2d',
            fg='#ffffff',
            insertbackground='#ffffff',
            selectbackground='#007acc',
            state=tk.NORMAL,  # Allow copying
            cursor='ibeam'
        )
        self.chat_display.pack(fill=tk.BOTH, expand=True)
        
        # Add right-click menu for copy/paste
        self.setup_context_menu()
        
    def setup_context_menu(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö copy/paste"""
        self.context_menu = tk.Menu(self.root, tearoff=0)
        self.context_menu.add_command(label="üìã Copy", command=self.copy_selected)
        self.context_menu.add_command(label="üìã Copy All", command=self.copy_all)
        self.context_menu.add_separator()
        self.context_menu.add_command(label="üóëÔ∏è Clear Chat", command=self.clear_chat)
        
        self.chat_display.bind("<Button-3>", self.show_context_menu)
        
    def show_context_menu(self, event):
        """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤"""
        try:
            self.context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            self.context_menu.grab_release()
            
    def copy_selected(self):
        """‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"""
        try:
            selected_text = self.chat_display.get(tk.SEL_FIRST, tk.SEL_LAST)
            self.root.clipboard_clear()
            self.root.clipboard_append(selected_text)
            self.add_system_message("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß")
        except tk.TclError:
            self.add_system_message("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
            
    def copy_all(self):
        """‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        all_text = self.chat_display.get(1.0, tk.END)
        self.root.clipboard_clear()
        self.root.clipboard_append(all_text)
        self.add_system_message("‚úÖ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß")
        
    def clear_chat(self):
        """‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ï"""
        self.chat_display.delete(1.0, tk.END)
        self.add_system_message("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
        
    def setup_control_panel(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏á‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°"""
        control_frame = ttk.Frame(parent, style='Dark.TFrame')
        parent.add(control_frame, weight=1)
        
        # Control panel title
        title_label = tk.Label(control_frame,
                              text="üéõÔ∏è Control Panel",
                              font=('Segoe UI', 14, 'bold'),
                              fg='#ffffff',
                              bg='#1e1e1e')
        title_label.pack(pady=(0, 15))
        
        # Quick actions
        self.setup_quick_actions(control_frame)
        
        # File operations
        self.setup_file_operations(control_frame)
        
        # AI operations
        self.setup_ai_operations(control_frame)
        
        # System info
        self.setup_system_info(control_frame)
        
    def setup_quick_actions(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πà‡∏ß‡∏ô"""
        quick_frame = tk.LabelFrame(parent, text="‚ö° Quick Actions", 
                                   font=('Segoe UI', 10, 'bold'),
                                   fg='#ffffff', bg='#1e1e1e')
        quick_frame.pack(fill=tk.X, pady=(0, 10))
        
        # Scan button
        self.scan_btn = tk.Button(quick_frame,
                                 text="üìÅ Scan Folder",
                                 command=self.scan_folder,
                                 bg='#007acc',
                                 fg='white',
                                 font=('Segoe UI', 10, 'bold'),
                                 relief=tk.FLAT,
                                 padx=15,
                                 pady=8)
        self.scan_btn.pack(fill=tk.X, padx=10, pady=5)
        
        # Quick queries
        queries = [
            ("üìä Summary", "give me summary"),
            ("üîç Large Files", "show me large files"),
            ("üîÑ Duplicates", "find duplicate files"),
            ("üìÅ File Types", "show file types")
        ]
        
        for text, query in queries:
            btn = tk.Button(quick_frame,
                           text=text,
                           command=lambda q=query: self.quick_query(q),
                           bg='#2d2d2d',
                           fg='#ffffff',
                           font=('Segoe UI', 9),
                           relief=tk.FLAT,
                           padx=10,
                           pady=5)
            btn.pack(fill=tk.X, padx=10, pady=2)
            
    def setup_file_operations(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        file_frame = tk.LabelFrame(parent, text="üìÅ File Operations", 
                                  font=('Segoe UI', 10, 'bold'),
                                  fg='#ffffff', bg='#1e1e1e')
        file_frame.pack(fill=tk.X, pady=(0, 10))
        
        # File search
        search_frame = tk.Frame(file_frame, bg='#1e1e1e')
        search_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(search_frame, text="Search:", font=('Segoe UI', 9), 
                fg='#ffffff', bg='#1e1e1e').pack(side=tk.LEFT)
        
        self.search_entry = tk.Entry(search_frame, font=('Segoe UI', 9),
                                    bg='#2d2d2d', fg='#ffffff',
                                    insertbackground='#ffffff')
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(5, 5))
        self.search_entry.bind('<Return>', lambda e: self.search_files())
        
        search_btn = tk.Button(search_frame, text="üîç", command=self.search_files,
                              bg='#007acc', fg='white', font=('Segoe UI', 9))
        search_btn.pack(side=tk.RIGHT)
        
    def setup_ai_operations(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô AI operations"""
        ai_frame = tk.LabelFrame(parent, text="ü§ñ AI Assistant", 
                                font=('Segoe UI', 10, 'bold'),
                                fg='#ffffff', bg='#1e1e1e')
        ai_frame.pack(fill=tk.X, pady=(0, 10))
        
        # AI status
        self.ai_status_label = tk.Label(ai_frame,
                                       text="Status: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...",
                                       font=('Segoe UI', 9),
                                       fg='#ffaa00',
                                       bg='#1e1e1e')
        self.ai_status_label.pack(pady=5)
        
        # AI actions
        ai_actions = [
            ("üß† Analyze Structure", self.analyze_structure),
            ("üìã Generate Report", self.generate_report),
            ("üí° Get Suggestions", self.get_suggestions),
            ("üîç Smart Search", self.smart_search)
        ]
        
        for text, command in ai_actions:
            btn = tk.Button(ai_frame, text=text, command=command,
                           bg='#2d2d2d', fg='#ffffff',
                           font=('Segoe UI', 9), relief=tk.FLAT,
                           padx=10, pady=5)
            btn.pack(fill=tk.X, padx=10, pady=2)
            
    def setup_system_info(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        info_frame = tk.LabelFrame(parent, text="‚ÑπÔ∏è System Info", 
                                  font=('Segoe UI', 10, 'bold'),
                                  fg='#ffffff', bg='#1e1e1e')
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.info_text = tk.Text(info_frame, height=6, font=('Consolas', 8),
                                bg='#2d2d2d', fg='#ffffff',
                                insertbackground='#ffffff', state=tk.DISABLED)
        self.info_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
    def setup_input_area(self, parent):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        input_frame = ttk.Frame(parent, style='Dark.TFrame')
        input_frame.pack(fill=tk.X, pady=(10, 0))
        
        # Input field with placeholder
        self.input_field = tk.Entry(input_frame,
                                   font=('Segoe UI', 12),
                                   bg='#2d2d2d',
                                   fg='#ffffff',
                                   insertbackground='#ffffff',
                                   relief=tk.FLAT)
        self.input_field.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 10))
        self.input_field.bind('<Return>', self.send_message)
        
        # Placeholder text
        self.input_field.insert(0, "üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...")
        self.input_field.bind('<FocusIn>', self.on_entry_click)
        self.input_field.bind('<FocusOut>', self.on_focus_out)
        self.input_field.config(fg='#888888')
        
        # Send button
        send_btn = tk.Button(input_frame,
                            text="üöÄ Send",
                            command=self.send_message,
                            bg='#007acc',
                            fg='white',
                            font=('Segoe UI', 11, 'bold'),
                            relief=tk.FLAT,
                            padx=20,
                            pady=8)
        send_btn.pack(side=tk.RIGHT)
        
    def on_entry_click(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà input field"""
        if self.input_field.get() == "üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...":
            self.input_field.delete(0, tk.END)
            self.input_field.config(fg='#ffffff')
            
    def on_focus_out(self, event):
        """‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å input field"""
        if not self.input_field.get():
            self.input_field.insert(0, "üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...")
            self.input_field.config(fg='#888888')
            
    def auto_start_services(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥"""
        self.add_system_message("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
        
        # Start File System service
        self.start_file_system_service()
        
        # Start Ollama service
        self.start_ollama_service()
        
    def start_file_system_service(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô File System service"""
        def start_fs():
            try:
                # Test File System connection
                test_result = self.tool._run(json.dumps({
                    "action": "query_function",
                    "function": "get_directory_summary",
                    "session_id": "test",
                    "args": []
                }))
                
                self.root.after(0, lambda: self.update_fs_status("‚úÖ Connected", "#00ff00"))
                self.root.after(0, lambda: self.add_system_message("‚úÖ File System service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"))
                
            except Exception as e:
                self.root.after(0, lambda: self.update_fs_status("‚ùå Error", "#ff4444"))
                self.root.after(0, lambda: self.add_system_message(f"‚ùå File System error: {str(e)}"))
                
        threading.Thread(target=start_fs, daemon=True).start()
        
    def start_ollama_service(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Ollama service"""
        def start_ollama():
            try:
                # Test Ollama connection
                response = requests.get("http://localhost:11434/api/tags", timeout=5)
                if response.status_code == 200:
                    models = response.json().get('models', [])
                    self.ollama_connected = True
                    self.root.after(0, lambda: self.update_ollama_status("‚úÖ Connected", "#00ff00"))
                    self.root.after(0, lambda: self.add_system_message(f"‚úÖ Ollama service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏û‡∏ö {len(models)} models)"))
                else:
                    raise Exception("Ollama server not responding")
                    
            except Exception as e:
                self.root.after(0, lambda: self.update_ollama_status("‚ùå Not Connected", "#ff4444"))
                self.root.after(0, lambda: self.add_system_message("‚ö†Ô∏è Ollama ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ File System ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"))
                
        threading.Thread(target=start_ollama, daemon=True).start()
        
    def update_fs_status(self, text, color):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ File System"""
        self.fs_status.config(text=f"üìÅ File System: {text}", fg=color)
        
    def update_ollama_status(self, text, color):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Ollama"""
        self.ollama_status.config(text=f"ü§ñ Ollama: {text}", fg=color)
        
    def add_message(self, sender, message, message_type="normal"):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ä‡∏ï"""
        # Timestamp
        timestamp = datetime.now().strftime("%H:%M:%S")
        
        # Format message based on type
        if message_type == "system":
            formatted_message = f"[{timestamp}] ü§ñ {message}\n\n"
            self.chat_display.insert(tk.END, formatted_message)
            self.chat_display.tag_add("system", f"end-{len(formatted_message)+1}c", "end-1c")
            self.chat_display.tag_config("system", foreground="#00ff00")
        elif message_type == "user":
            formatted_message = f"[{timestamp}] üë§ ‡∏Ñ‡∏∏‡∏ì: {message}\n\n"
            self.chat_display.insert(tk.END, formatted_message)
            self.chat_display.tag_add("user", f"end-{len(formatted_message)+1}c", "end-1c")
            self.chat_display.tag_config("user", foreground="#007acc")
        elif message_type == "result":
            formatted_message = f"[{timestamp}] üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:\n{message}\n\n"
            self.chat_display.insert(tk.END, formatted_message)
            self.chat_display.tag_add("result", f"end-{len(formatted_message)+1}c", "end-1c")
            self.chat_display.tag_config("result", foreground="#ffaa00")
        elif message_type == "error":
            formatted_message = f"[{timestamp}] ‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {message}\n\n"
            self.chat_display.insert(tk.END, formatted_message)
            self.chat_display.tag_add("error", f"end-{len(formatted_message)+1}c", "end-1c")
            self.chat_display.tag_config("error", foreground="#ff4444")
        elif message_type == "ai":
            formatted_message = f"[{timestamp}] ü§ñ AI: {message}\n\n"
            self.chat_display.insert(tk.END, formatted_message)
            self.chat_display.tag_add("ai", f"end-{len(formatted_message)+1}c", "end-1c")
            self.chat_display.tag_config("ai", foreground="#ff66cc")
        
        self.chat_display.see(tk.END)
        
    def add_system_message(self, message):
        """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö"""
        self.add_message("system", message, "system")
        
    def scan_folder(self):
        """‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        if self.scanning:
            messagebox.showwarning("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
            return
            
        folder_path = filedialog.askdirectory(title="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô")
        if not folder_path:
            return
            
        self.scanning = True
        self.scan_btn.config(state=tk.DISABLED, text="‚è≥ Scanning...")
        
        # Run scan in separate thread
        thread = threading.Thread(target=self._perform_scan, args=(folder_path,))
        thread.daemon = True
        thread.start()
        
    def _perform_scan(self, folder_path):
        """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å"""
        try:
            self.root.after(0, lambda: self.add_system_message(f"üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_path}"))
            
            scan_params = {
                "action": "scan",
                "path": folder_path,
                "config": {
                    "max_depth": 10,
                    "include_hidden": False,
                    "calculate_hashes": True,
                    "hash_size_limit_mb": 50
                }
            }
            
            result = self.tool._run(json.dumps(scan_params))
            
            if "Session ID:" in result:
                self.current_session_id = result.split("Session ID: ")[1].strip()
                self.root.after(0, lambda: self.add_system_message(f"‚úÖ ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! Session ID: {self.current_session_id}"))
                self.root.after(0, lambda: self.session_status.config(text=f"üíæ Session: {self.current_session_id[:8]}..."))
                self.root.after(0, lambda: self.update_system_info())
            else:
                self.root.after(0, lambda: self.add_system_message(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result}"))
                
        except Exception as e:
            self.root.after(0, lambda: self.add_system_message(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"))
        finally:
            self.scanning = False
            self.root.after(0, lambda: self.scan_btn.config(state=tk.NORMAL, text="üìÅ Scan Folder"))
            
    def send_message(self, event=None):
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        message = self.input_field.get().strip()
        if not message or message == "üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...":
            return
            
        self.input_field.delete(0, tk.END)
        self.input_field.insert(0, "üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á...")
        self.input_field.config(fg='#888888')
        
        self.add_message("user", message, "user")
        
        # Process message in separate thread
        thread = threading.Thread(target=self._process_message, args=(message,))
        thread.daemon = True
        thread.start()
        
    def _process_message(self, message):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        try:
            if not self.current_session_id:
                self.root.after(0, lambda: self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"))
                return
                
            # Check for special commands
            if message.lower().startswith("/help"):
                self._show_help()
                return
            elif message.lower().startswith("/scan"):
                self.root.after(0, lambda: self.add_system_message("‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏° 'Scan Folder' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà"))
                return
                
            # Try AI first if available
            if self.ollama_connected and self._should_use_ai(message):
                self._process_with_ai(message)
            else:
                # Use File System query
                self._process_with_filesystem(message)
                
        except Exception as e:
            self.root.after(0, lambda: self.add_message("error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", "error"))
            
    def _should_use_ai(self, message):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ AI ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        ai_keywords = ['analyze', 'explain', 'suggest', 'recommend', 'why', 'how', 'what', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', '‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥', '‡∏ó‡∏≥‡πÑ‡∏°', '‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£', '‡∏≠‡∏∞‡πÑ‡∏£']
        return any(keyword in message.lower() for keyword in ai_keywords)
        
    def _process_with_ai(self, message):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI"""
        try:
            # Get file system data first
            fs_data = self._get_filesystem_data()
            
            # Send to Ollama
            ai_response = self._ask_ollama(message, fs_data)
            
            self.root.after(0, lambda: self.add_message("ai", ai_response, "ai"))
            
        except Exception as e:
            # Fallback to File System
            self.root.after(0, lambda: self.add_system_message("‚ö†Ô∏è AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏ä‡πâ File System ‡πÅ‡∏ó‡∏ô"))
            self._process_with_filesystem(message)
            
    def _process_with_filesystem(self, message):
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ File System"""
        try:
            query_params = {
                "action": "query_natural",
                "request": message,
                "session_id": self.current_session_id
            }
            
            result = self.tool._run(json.dumps(query_params))
            
            # Parse and format result
            try:
                result_data = json.loads(result)
                if result_data.get('success'):
                    formatted_result = self._format_result(result_data.get('data', result_data))
                    self.root.after(0, lambda: self.add_message("result", formatted_result, "result"))
                else:
                    self.root.after(0, lambda: self.add_message("error", result_data.get('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ'), "error"))
            except json.JSONDecodeError:
                self.root.after(0, lambda: self.add_message("result", result, "result"))
                
        except Exception as e:
            self.root.after(0, lambda: self.add_message("error", f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", "error"))
            
    def _get_filesystem_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• File System ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI"""
        try:
            summary_params = {
                "action": "query_function",
                "function": "get_directory_summary",
                "session_id": self.current_session_id,
                "args": []
            }
            
            result = self.tool._run(json.dumps(summary_params))
            return result
            
        except Exception:
            return "No file system data available"
            
    def _ask_ollama(self, message, fs_data):
        """‡∏ñ‡∏≤‡∏° Ollama"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏°‡∏µ context
            prompt = f"""You are a helpful File System Analysis Assistant. Your job is to analyze file system data and provide clear, useful answers.

FILE SYSTEM DATA:
{fs_data}

USER QUESTION: {message}

TASK: Analyze the file system data above and answer the user's question. Be specific, helpful, and respond in Thai language.

IMPORTANT: Use the actual file system data provided above. Do not say you cannot help with file management - this IS your job.

Please provide a clear, detailed answer:"""
            
            response = requests.post("http://localhost:11434/api/generate", 
                                   json={
                                       "model": "deepseek-coder:6.7b-instruct",
                                       "prompt": prompt,
                                       "stream": False,
                                       "options": {
                                           "temperature": 0.3,
                                           "top_p": 0.8,
                                           "num_predict": 800
                                       }
                                   }, 
                                   timeout=30)
            
            if response.status_code == 200:
                ai_response = response.json().get('response', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ')
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ AI ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö generic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                generic_phrases = [
                    "i'm sorry", "i cannot", "outside of my", "programming assistant",
                    "computer science", "cannot assist", "not related", "file management",
                    "‡∏ã‡∏µ‡∏°‡∏¥‡∏™‡πå", "‡∏ï‡∏±‡∏ß‡∏°‡∏µ‡∏ô‡∏ï‡∏±‡∏á", "‡∏õ‡∏£‡∏∞‡∏¢‡∏≤‡∏ß", "‡∏û‡∏¥‡∏™‡∏π‡∏à‡∏ô‡πå"
                ]
                
                if any(phrase in ai_response.lower() for phrase in generic_phrases):
                    return self._generate_fallback_response(message, fs_data)
                
                return ai_response
            else:
                raise Exception("Ollama request failed")
                
        except Exception as e:
            return self._generate_fallback_response(message, fs_data)
            
    def _generate_fallback_response(self, message, fs_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á fallback response ‡πÄ‡∏°‡∏∑‡πà‡∏≠ AI ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à"""
        try:
            # Parse file system data
            if isinstance(fs_data, str):
                # Try to parse JSON from string
                import re
                json_match = re.search(r'\{.*\}', fs_data, re.DOTALL)
                if json_match:
                    fs_data = json.loads(json_match.group())
                else:
                    return f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {fs_data}"
            
            # Generate response based on question type
            message_lower = message.lower()
            
            if "summary" in message_lower or "‡∏™‡∏£‡∏∏‡∏õ" in message_lower:
                return self._generate_summary_response(fs_data)
            elif "large" in message_lower or "‡πÉ‡∏´‡∏ç‡πà" in message_lower:
                return self._generate_large_files_response(fs_data)
            elif "duplicate" in message_lower or "‡∏ã‡πâ‡∏≥" in message_lower:
                return self._generate_duplicate_response(fs_data)
            elif "analyze" in message_lower or "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå" in message_lower:
                return self._generate_analysis_response(fs_data)
            else:
                return self._generate_general_response(fs_data, message)
                
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"
            
    def _generate_summary_response(self, fs_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö summary"""
        try:
            # Query for comprehensive summary
            summary_params = {
                "action": "query_function",
                "function": "get_directory_summary",
                "session_id": self.current_session_id,
                "args": []
            }
            
            result = self.tool._run(json.dumps(summary_params))
            summary_data = json.loads(result)
            
            if summary_data.get('success') and summary_data.get('summary'):
                summary = summary_data['summary']
                
                # Get file types breakdown
                file_types = summary.get('file_types', {})
                total_files = summary.get('total_files', 0)
                total_size_mb = summary.get('total_size_mb', 0)
                average_size = summary.get('average_size', 0)
                
                response = f"""üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö:

üìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:
‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files:,} ‡πÑ‡∏ü‡∏•‡πå
‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: {total_size_mb:.2f} MB ({summary.get('total_size', 0):,} bytes)
‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {average_size:,.0f} bytes

üìã ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå:"""
                
                # Show top file types
                if file_types:
                    sorted_types = sorted(file_types.items(), key=lambda x: x[1], reverse=True)
                    for ext, count in sorted_types[:8]:
                        percentage = (count / total_files * 100) if total_files > 0 else 0
                        response += f"\n‚Ä¢ {ext}: {count:,} ‡πÑ‡∏ü‡∏•‡πå ({percentage:.1f}%)"
                
                # Show largest files
                largest_files = summary.get('largest_files', [])
                if largest_files:
                    response += f"\n\nüîù ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î:"
                    for i, file_info in enumerate(largest_files[:3], 1):
                        size_mb = file_info.get('file_size', 0) / (1024 * 1024)
                        response += f"\n{i}. {file_info.get('file_name', 'Unknown')} ({size_mb:.2f} MB)"
                
                # Analysis and recommendations
                response += f"\n\nüí° ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:"
                if total_files < 50:
                    response += f"\n‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ({total_files} ‡πÑ‡∏ü‡∏•‡πå) - ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å"
                elif total_files < 500:
                    response += f"\n‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ({total_files} ‡πÑ‡∏ü‡∏•‡πå) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏¢‡∏∞"
                else:
                    response += f"\n‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ({total_files} ‡πÑ‡∏ü‡∏•‡πå) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô"
                
                if total_size_mb < 100:
                    response += f"\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢ ({total_size_mb:.2f} MB) - ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö"
                elif total_size_mb < 1000:
                    response += f"\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á ({total_size_mb:.2f} MB) - ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà"
                else:
                    response += f"\n‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å ({total_size_mb:.2f} MB) - ‡∏Ñ‡∏ß‡∏£‡∏´‡∏≤‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î"
                
                if len(file_types) < 10:
                    response += f"\n‚Ä¢ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ô‡πâ‡∏≠‡∏¢ ({len(file_types)} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) - ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢"
                else:
                    response += f"\n‚Ä¢ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ({len(file_types)} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) - ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°"
                
                return response
            else:
                return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏î‡πâ"
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ: {str(e)}"
            
    def _generate_large_files_response(self, fs_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö large files"""
        try:
            # Query for largest files specifically
            large_files_params = {
                "action": "query_sql",
                "sql": "SELECT file_name, file_path, file_size FROM files WHERE session_id = ? ORDER BY file_size DESC LIMIT 5",
                "params": [self.current_session_id]
            }
            
            result = self.tool._run(json.dumps(large_files_params))
            large_files_data = json.loads(result)
            
            if large_files_data.get('success') and large_files_data.get('data'):
                files = large_files_data['data']
                if files:
                    response = "üîç ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:\n\n"
                    for i, file_info in enumerate(files, 1):
                        size_mb = file_info.get('file_size', 0) / (1024 * 1024)
                        response += f"{i}. üìÑ {file_info.get('file_name', 'Unknown')}\n"
                        response += f"   üìÅ Path: {file_info.get('file_path', 'Unknown')}\n"
                        response += f"   üíæ Size: {size_mb:.2f} MB ({file_info.get('file_size', 0):,} bytes)\n\n"
                    
                    response += "üí° ‡∏Ç‡πâ‡∏≠‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï:\n"
                    response += f"‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {files[0].get('file_name', 'Unknown')} ({files[0].get('file_size', 0) / (1024*1024):.2f} MB)\n"
                    response += f"‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {files[-1].get('file_name', 'Unknown')} ({files[-1].get('file_size', 0) / (1024*1024):.2f} MB)\n"
                    
                    return response
                else:
                    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
            else:
                return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏î‡πâ"
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà: {str(e)}"
            
    def _generate_duplicate_response(self, fs_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö duplicates"""
        try:
            # Query for duplicates
            duplicate_params = {
                "action": "query_function",
                "function": "get_duplicate_files",
                "session_id": self.current_session_id,
                "args": []
            }
            
            result = self.tool._run(json.dumps(duplicate_params))
            duplicate_data = json.loads(result)
            
            if duplicate_data.get('success') and duplicate_data.get('duplicates'):
                duplicates = duplicate_data['duplicates']
                response = "üîÑ ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏ö:\n\n"
                
                for i, dup in enumerate(duplicates[:3], 1):
                    response += f"{i}. üîó Hash: {dup.get('hash_md5', 'Unknown')[:8]}...\n"
                    response += f"   üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå: {dup.get('count', 0)} ‡πÑ‡∏ü‡∏•‡πå\n"
                    response += f"   üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: {dup.get('total_size', 0) / (1024*1024):.2f} MB\n"
                    response += f"   ‚ö†Ô∏è ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢: {dup.get('wasted_space', 0) / (1024*1024):.2f} MB\n\n"
                    
                    for file_info in dup.get('files', [])[:2]:
                        response += f"      üìÑ {file_info.get('file_name', 'Unknown')}\n"
                    response += "\n"
                    
                return response
            else:
                return "‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥: {str(e)}"
            
    def _generate_analysis_response(self, fs_data):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis"""
        try:
            if isinstance(fs_data, dict) and 'summary' in fs_data:
                summary = fs_data['summary']
                total_files = summary.get('total_files', 0)
                total_size_mb = summary.get('total_size_mb', 0)
                file_types = summary.get('file_types', {})
                
                response = "üß† ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå:\n\n"
                
                # File type analysis
                response += "üìã ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå:\n"
                for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True)[:5]:
                    percentage = (count / total_files * 100) if total_files > 0 else 0
                    response += f"   ‚Ä¢ {ext}: {count} ‡πÑ‡∏ü‡∏•‡πå ({percentage:.1f}%)\n"
                
                response += f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:\n"
                response += f"   ‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_files:,} ‡πÑ‡∏ü‡∏•‡πå\n"
                response += f"   ‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: {total_size_mb:.2f} MB\n"
                response += f"   ‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {summary.get('average_size', 0):,.0f} bytes\n"
                
                # Recommendations
                response += f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n"
                if total_files > 100:
                    response += "   ‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö\n"
                if total_size_mb > 1000:
                    response += "   ‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô\n"
                if len(file_types) > 20:
                    response += "   ‚Ä¢ ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°\n"
                    
                return response
            else:
                return "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ"
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {str(e)}"
            
    def _generate_general_response(self, fs_data, message):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á response ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        try:
            if isinstance(fs_data, dict) and 'summary' in fs_data:
                summary = fs_data['summary']
                return f"""ü§ñ ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: "{message}"

üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
‚Ä¢ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary.get('total_files', 'N/A')} ‡πÑ‡∏ü‡∏•‡πå
‚Ä¢ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: {summary.get('total_size_mb', 'N/A')} MB
‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå: {len(summary.get('file_types', {}))} ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó

üí° ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:
‚Ä¢ "give me summary" - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ "show me large files" - ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ "find duplicate files" - ‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥
‚Ä¢ "analyze structure" - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á"""
            else:
                return f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° '{message}' ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô"
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
            
    def _format_file_types(self, file_types):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå"""
        if not file_types:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            
        formatted = []
        for ext, count in sorted(file_types.items(), key=lambda x: x[1], reverse=True)[:5]:
            formatted.append(f"   ‚Ä¢ {ext}: {count} ‡πÑ‡∏ü‡∏•‡πå")
        return "\n".join(formatted)
        
    def _format_largest_files(self, largest_files):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà"""
        if not largest_files:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            
        formatted = []
        for i, file_info in enumerate(largest_files[:3], 1):
            size_mb = file_info.get('file_size', 0) / (1024 * 1024)
            formatted.append(f"   {i}. {file_info.get('file_name', 'Unknown')} ({size_mb:.2f} MB)")
        return "\n".join(formatted)
        
    def quick_query(self, query):
        """‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πà‡∏ß‡∏ô"""
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", query, "user")
        
        # Process in thread
        thread = threading.Thread(target=self._process_message, args=(query,))
        thread.daemon = True
        thread.start()
        
    def search_files(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå"""
        search_term = self.search_entry.get().strip()
        if not search_term:
            return
            
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", f"search: {search_term}", "user")
        
        # Process in thread
        thread = threading.Thread(target=self._process_message, args=(f"find files containing {search_term}",))
        thread.daemon = True
        thread.start()
        
    def analyze_structure(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á"""
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", "analyze the file structure and explain what this project is about", "user")
        
        thread = threading.Thread(target=self._process_message, args=("analyze the file structure and explain what this project is about",))
        thread.daemon = True
        thread.start()
        
    def generate_report(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", "generate a comprehensive report about this file system", "user")
        
        thread = threading.Thread(target=self._process_message, args=("generate a comprehensive report about this file system",))
        thread.daemon = True
        thread.start()
        
    def get_suggestions(self):
        """‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥"""
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", "what suggestions do you have for improving this file organization", "user")
        
        thread = threading.Thread(target=self._process_message, args=("what suggestions do you have for improving this file organization",))
        thread.daemon = True
        thread.start()
        
    def smart_search(self):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞"""
        if not self.current_session_id:
            self.add_system_message("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return
            
        self.add_message("user", "perform a smart search to find important files and patterns", "user")
        
        thread = threading.Thread(target=self._process_message, args=("perform a smart search to find important files and patterns",))
        thread.daemon = True
        thread.start()
        
    def update_system_info(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö"""
        try:
            if self.current_session_id:
                # Get basic stats
                stats_params = {
                    "action": "query_function",
                    "function": "get_directory_summary",
                    "session_id": self.current_session_id,
                    "args": []
                }
                
                result = self.tool._run(json.dumps(stats_params))
                result_data = json.loads(result)
                
                info_text = f"""
Session: {self.current_session_id[:8]}...
Files: {result_data.get('total_files', 'N/A')}
Size: {result_data.get('total_size_mb', 'N/A')} MB
Types: {len(result_data.get('file_types', []))} types

Ollama: {'‚úÖ Connected' if self.ollama_connected else '‚ùå Not Connected'}
Models: Available for AI analysis
                """
                
                self.info_text.config(state=tk.NORMAL)
                self.info_text.delete(1.0, tk.END)
                self.info_text.insert(1.0, info_text)
                self.info_text.config(state=tk.DISABLED)
                
        except Exception as e:
            pass
            
    def _format_result(self, data):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        if isinstance(data, list):
            if not data:
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            
            # Check if it's a list of dictionaries (table data)
            if isinstance(data[0], dict):
                return self._format_table(data)
            else:
                return "\n".join(str(item) for item in data)
        elif isinstance(data, dict):
            return json.dumps(data, indent=2, ensure_ascii=False)
        else:
            return str(data)
            
    def _format_table(self, data):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        if not data:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
            
        # Get headers
        headers = list(data[0].keys())
        
        # Calculate column widths
        col_widths = {}
        for header in headers:
            col_widths[header] = len(str(header))
            
        for row in data:
            for header in headers:
                col_widths[header] = max(col_widths[header], len(str(row.get(header, ''))))
                
        # Create table
        table = []
        
        # Header
        header_row = " | ".join(f"{header:<{col_widths[header]}}" for header in headers)
        table.append(header_row)
        table.append("-" * len(header_row))
        
        # Data rows
        for row in data:
            row_str = " | ".join(f"{str(row.get(header, '')):<{col_widths[header]}}" for header in headers)
            table.append(row_str)
            
        return "\n".join(table)
        
    def _show_help(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠"""
        help_text = """
üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ:

üîç Natural Language Queries:
‚Ä¢ "show me large files" - ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ "find duplicate files" - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥
‚Ä¢ "give me summary" - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
‚Ä¢ "show files with extension .py" - ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•

ü§ñ AI Assistant (‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Ollama):
‚Ä¢ "analyze this project" - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
‚Ä¢ "explain the structure" - ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
‚Ä¢ "suggest improvements" - ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á

üíæ SQL Queries:
‚Ä¢ "SELECT * FROM files WHERE file_size > 1000000" - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ SQL

üîß Special Commands:
‚Ä¢ /help - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
‚Ä¢ /scan - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô

üí° Tips:
‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
‚Ä¢ AI ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        """
        self.add_system_message(help_text)

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        root = tk.Tk()
        app = UnifiedChatApp(root)
        
        # Center window
        root.update_idletasks()
        width = root.winfo_width()
        height = root.winfo_height()
        x = (root.winfo_screenwidth() // 2) - (width // 2)
        y = (root.winfo_screenheight() // 2) - (height // 2)
        root.geometry(f'{width}x{height}+{x}+{y}')
        
        # Force focus and show window
        root.focus_force()
        root.deiconify()
        
        print("üöÄ Unified Chat App ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        print("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ File System ‡πÅ‡∏•‡∏∞ Ollama ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        print("ÔøΩÔøΩ ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á GUI ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÅ‡∏•‡πâ‡∏ß")
        
        root.mainloop()
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î...")

if __name__ == "__main__":
    main()
