#!/usr/bin/env python3
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Notion MCP Integration
‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á Notion MCP Integration
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import
sys.path.append('../src/server')
sys.path.append('../src/core')

from notion_mcp_integration import NotionMCPIntegration
from file_system_analyzer import FileSystemMCPTool

class NotionIntegrationExample:
    """
    ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Notion MCP Integration
    """
    
    def __init__(self, notion_token: str = None, parent_page_id: str = None):
        """
        Initialize example
        
        Args:
            notion_token: Notion Integration Token
            parent_page_id: ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ parent ‡πÉ‡∏ô Notion
        """
        self.notion_token = notion_token or os.getenv('NOTION_INTEGRATION_TOKEN')
        self.parent_page_id = parent_page_id or os.getenv('NOTION_PARENT_PAGE_ID')
        self.notion = None
        
        if not self.notion_token:
            raise ValueError("‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Notion Integration Token")
        
        if not self.parent_page_id:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parent page ID - ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ó‡∏ô")
    
    async def setup(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Notion MCP Integration"""
        print("üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Notion MCP Integration...")
        
        self.notion = NotionMCPIntegration(self.notion_token)
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Server
        if await self.notion.start_mcp_server():
            print("‚úÖ Notion MCP Integration ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return True
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Notion MCP Integration ‡πÑ‡∏î‡πâ")
            return False
    
    async def cleanup(self):
        """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î resources"""
        if self.notion:
            await self.notion.stop_mcp_server()
            print("‚úÖ ‡∏´‡∏¢‡∏∏‡∏î Notion MCP Integration ‡πÅ‡∏•‡πâ‡∏ß")
    
    async def example_1_basic_operations(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
        print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1: ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô")
        print("=" * 50)
        
        # 1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        print("1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠...")
        result = await self.notion.send_mcp_request("API-get-self", {})
        if "error" not in result:
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {result.get('result', {}).get('name', 'Unknown')}")
        else:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error')}")
            return
        
        # 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤
        print("\n2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏ô‡πâ‡∏≤...")
        search_result = await self.notion.search_pages(
            query="file analysis",
            filter_type="page"
        )
        
        if "error" not in search_result:
            pages = search_result.get('result', {}).get('results', [])
            print(f"‚úÖ ‡∏û‡∏ö‡∏´‡∏ô‡πâ‡∏≤ {len(pages)} ‡∏´‡∏ô‡πâ‡∏≤")
            for page in pages[:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                title = page.get('properties', {}).get('title', {}).get('title', [])
                if title:
                    print(f"   - {title[0].get('text', {}).get('content', 'Untitled')}")
        else:
            print(f"‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {search_result.get('error')}")
    
    async def example_2_file_structure_export(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2: ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        print("\nüìÅ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2: ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå")
        print("=" * 50)
        
        if not self.parent_page_id:
            print("‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parent page ID")
            return
        
        # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå
        print("1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå...")
        analyzer = FileSystemMCPTool()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        sample_structure = {
            "summary": "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á",
            "statistics": {
                "total_files": 15,
                "total_directories": 5,
                "total_size": "2.5 MB"
            },
            "file_tree": [
                {
                    "name": "src",
                    "type": "directory",
                    "children": [
                        {
                            "name": "main.py",
                            "type": "file",
                            "size": 1024
                        },
                        {
                            "name": "utils",
                            "type": "directory",
                            "children": [
                                {
                                    "name": "helper.py",
                                    "type": "file",
                                    "size": 512
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "docs",
                    "type": "directory",
                    "children": [
                        {
                            "name": "README.md",
                            "type": "file",
                            "size": 2048
                        }
                    ]
                }
            ]
        }
        
        # 2. ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Notion
        print("2. ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏¢‡∏±‡∏á Notion...")
        result = await self.notion.export_file_structure_to_notion(
            file_structure=sample_structure,
            parent_page_id=self.parent_page_id
        )
        
        if "error" not in result:
            page_id = result.get('result', {}).get('id', 'Unknown')
            print(f"‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page_id}")
            print(f"   ‡∏î‡∏π‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: https://notion.so/{page_id.replace('-', '')}")
        else:
            print(f"‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error')}")
    
    async def example_3_database_management(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database"""
        print("\nüóÑÔ∏è ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Database")
        print("=" * 50)
        
        if not self.parent_page_id:
            print("‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parent page ID")
            return
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á database
        print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå...")
        database_result = await self.notion.create_file_analysis_database(
            parent_page_id=self.parent_page_id
        )
        
        if "error" in database_result:
            print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {database_result.get('error')}")
            return
        
        database_id = database_result.get('result', {}).get('id', 'Unknown')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {database_id}")
        
        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
        print("\n2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡πÉ‡∏ô database...")
        sample_files = [
            {
                "name": "main.py",
                "path": "/path/to/main.py",
                "size": 1024,
                "modified": "2024-01-01T00:00:00Z"
            },
            {
                "name": "config.json",
                "path": "/path/to/config.json",
                "size": 512,
                "modified": "2024-01-02T00:00:00Z"
            },
            {
                "name": "README.md",
                "path": "/path/to/README.md",
                "size": 2048,
                "modified": "2024-01-03T00:00:00Z"
            }
        ]
        
        for file_info in sample_files:
            result = await self.notion.add_file_to_database(
                database_id=database_id,
                file_info=file_info
            )
            
            if "error" not in result:
                print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå {file_info['name']} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            else:
                print(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå {file_info['name']} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result.get('error')}")
        
        # 3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database
        print("\n3. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô database...")
        query_result = await self.notion.query_database(
            database_id=database_id,
            filter={
                "property": "File Type",
                "select": {"equals": "Code"}
            },
            sorts=[
                {
                    "property": "Size (bytes)",
                    "direction": "descending"
                }
            ]
        )
        
        if "error" not in query_result:
            results = query_result.get('result', {}).get('results', [])
            print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Code {len(results)} ‡πÑ‡∏ü‡∏•‡πå")
            for item in results:
                properties = item.get('properties', {})
                name = properties.get('File Name', {}).get('title', [])
                if name:
                    print(f"   - {name[0].get('text', {}).get('content', 'Unknown')}")
        else:
            print(f"‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {query_result.get('error')}")
    
    async def example_4_page_management(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 4: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤"""
        print("\nüìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 4: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πâ‡∏≤")
        print("=" * 50)
        
        if not self.parent_page_id:
            print("‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parent page ID")
            return
        
        # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
        print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà...")
        page_properties = {
            "title": {
                "title": [{"text": {"content": f"File Analysis Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}"}}]
            }
        }
        
        page_content = [
            {
                "object": "block",
                "type": "heading_1",
                "heading_1": {
                    "rich_text": [{"text": {"content": "üìä File Analysis Report"}}]
                }
            },
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"text": {"content": "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏∞‡∏ö‡∏ö"}}]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [{"text": {"content": "üìÅ Total Files: 150"}}]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [{"text": {"content": "üìÇ Total Directories: 25"}}]
                }
            },
            {
                "object": "block",
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [{"text": {"content": "üíæ Total Size: 15.2 MB"}}]
                }
            }
        ]
        
        create_result = await self.notion.create_page(
            parent_id=self.parent_page_id,
            properties=page_properties,
            children=page_content
        )
        
        if "error" in create_result:
            print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {create_result.get('error')}")
            return
        
        page_id = create_result.get('result', {}).get('id', 'Unknown')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {page_id}")
        
        # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤
        print("\n2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤...")
        update_properties = {
            "title": {
                "title": [{"text": {"content": f"Updated File Analysis Report - {datetime.now().strftime('%Y-%m-%d %H:%M')}"}}]
            }
        }
        
        update_result = await self.notion.update_page(
            page_id=page_id,
            properties=update_properties
        )
        
        if "error" not in update_result:
            print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {update_result.get('error')}")
        
        # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° content blocks
        print("\n3. ‡πÄ‡∏û‡∏¥‡πà‡∏° content blocks...")
        additional_blocks = [
            {
                "object": "block",
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"text": {"content": "üîç Analysis Details"}}]
                }
            },
            {
                "object": "block",
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"text": {"content": "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"}}]
                }
            }
        ]
        
        append_result = await self.notion.append_block_children(
            block_id=page_id,
            children=additional_blocks
        )
        
        if "error" not in append_result:
            print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° content blocks ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        else:
            print(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏° content blocks ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {append_result.get('error')}")
    
    async def example_5_batch_operations(self):
        """‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Batch"""
        print("\n‚ö° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö Batch")
        print("=" * 50)
        
        if not self.parent_page_id:
            print("‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ - ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ parent page ID")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å
        print("1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å...")
        batch_files = []
        for i in range(10):
            batch_files.append({
                "name": f"file_{i:03d}.py",
                "path": f"/path/to/file_{i:03d}.py",
                "size": 1024 + (i * 100),
                "modified": f"2024-01-{i+1:02d}T00:00:00Z"
            })
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch processing
        print("2. ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö batch processing...")
        database_result = await self.notion.create_file_analysis_database(
            parent_page_id=self.parent_page_id
        )
        
        if "error" in database_result:
            print(f"‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {database_result.get('error')}")
            return
        
        database_id = database_result.get('result', {}).get('id', 'Unknown')
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á database ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {database_id}")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö batch
        print("3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ö‡∏ö batch...")
        success_count = 0
        error_count = 0
        
        for file_info in batch_files:
            result = await self.notion.add_file_to_database(
                database_id=database_id,
                file_info=file_info
            )
            
            if "error" not in result:
                success_count += 1
            else:
                error_count += 1
                print(f"   ‚ùå {file_info['name']}: {result.get('error')}")
        
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count} ‡πÑ‡∏ü‡∏•‡πå")
        if error_count > 0:
            print(f"‚ùå ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {error_count} ‡πÑ‡∏ü‡∏•‡πå")
        
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch
        print("\n4. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö batch...")
        query_result = await self.notion.query_database(
            database_id=database_id,
            page_size=100
        )
        
        if "error" not in query_result:
            results = query_result.get('result', {}).get('results', [])
            print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(results)} ‡πÑ‡∏ü‡∏•‡πå")
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
            file_types = {}
            for item in results:
                properties = item.get('properties', {})
                file_type = properties.get('File Type', {}).get('select', {}).get('name', 'Unknown')
                file_types[file_type] = file_types.get(file_type, 0) + 1
            
            print("   üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå:")
            for file_type, count in file_types.items():
                print(f"      - {file_type}: {count} ‡πÑ‡∏ü‡∏•‡πå")
        else:
            print(f"‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {query_result.get('error')}")
    
    async def run_all_examples(self):
        """‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö Notion MCP Integration")
        print("=" * 60)
        
        try:
            # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
            if not await self.setup():
                return
            
            # ‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            await self.example_1_basic_operations()
            await self.example_2_file_structure_export()
            await self.example_3_database_management()
            await self.example_4_page_management()
            await self.example_5_batch_operations()
            
            print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        
        finally:
            # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
            await self.cleanup()

async def main():
    """Main function"""
    print("üöÄ Notion MCP Integration Examples")
    print("=" * 40)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö environment variables
    token = os.getenv('NOTION_INTEGRATION_TOKEN')
    parent_page_id = os.getenv('NOTION_PARENT_PAGE_ID')
    
    if not token:
        print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_INTEGRATION_TOKEN environment variable")
        print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: export NOTION_INTEGRATION_TOKEN='ntn_your_token_here'")
        return
    
    if not parent_page_id:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ NOTION_PARENT_PAGE_ID")
        print("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: export NOTION_PARENT_PAGE_ID='your_page_id_here'")
        print("‡∏ö‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏Ç‡πâ‡∏≤‡∏°")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    example = NotionIntegrationExample(token, parent_page_id)
    await example.run_all_examples()

if __name__ == "__main__":
    asyncio.run(main())
