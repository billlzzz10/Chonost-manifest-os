#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Universal File System MCP Server Launcher
.DESCRIPTION
    Launcher script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Universal File System MCP Server
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
.PARAMETER Mode
    ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (server, test, config)
.PARAMETER Platform
    ‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (local, cloud, mobile, network)
.EXAMPLE
    .\start-universal.ps1 -Mode server
    .\start-universal.ps1 -Mode test -Platform local
    .\start-universal.ps1 -Mode config
#>

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("server", "test", "config", "help")]
    [string]$Mode = "server",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("local", "cloud", "mobile", "network", "all")]
    [string]$Platform = "all"
)

# Color functions
function Write-ColorText {
    param(
        [string]$Text,
        [string]$Color = "White"
    )
    
    $Colors = @{
        "Success" = "Green"
        "Error" = "Red"
        "Warning" = "Yellow"
        "Info" = "Cyan"
        "Header" = "Magenta"
        "SubHeader" = "Blue"
    }
    
    $ColorCode = $Colors[$Color]
    if (-not $ColorCode) { $ColorCode = "White" }
    
    Write-Host $Text -ForegroundColor $ColorCode
}

function Show-Header {
    Write-ColorText "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Header"
    Write-ColorText "‚ïë                üåê Universal File System MCP Server          ‚ïë" "Header"
    Write-ColorText "‚ïë                    Version 3.0.0 - Orion Senior Dev         ‚ïë" "Header"
    Write-ColorText "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Header"
    Write-Host ""
}

function Show-PlatformInfo {
    Write-ColorText "üìã ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°:" "SubHeader"
    Write-ColorText "   üñ•Ô∏è  Desktop: Windows, macOS, Linux" "Info"
    Write-ColorText "   ‚òÅÔ∏è  Cloud: Google Drive, Dropbox, OneDrive, AWS S3" "Info"
    Write-ColorText "   üì± Mobile: Android, iOS" "Info"
    Write-ColorText "   üåê Network: NAS, FTP, SFTP, SMB" "Info"
    Write-Host ""
}

function Show-ModeInfo {
    Write-ColorText "üéØ ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:" "SubHeader"
    Write-ColorText "   server  - ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô MCP Server" "Info"
    Write-ColorText "   test    - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" "Info"
    Write-ColorText "   config  - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" "Info"
    Write-ColorText "   help    - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" "Info"
    Write-Host ""
}

function Test-Prerequisites {
    Write-ColorText "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Prerequisites..." "Info"
    
    # Check Python
    try {
        # Try multiple Python paths
        $pythonPaths = @(
            "python",
            "py",
            "python3",
            ".\venv\Scripts\python.exe",
            "C:\Python312\python.exe",
            "C:\Python311\python.exe",
            "C:\Python310\python.exe",
            "C:\Users\$env:USERNAME\AppData\Local\Programs\Python\Python312\python.exe",
            "C:\Users\$env:USERNAME\AppData\Local\Programs\Python\Python311\python.exe",
            "C:\Users\$env:USERNAME\AppData\Local\Programs\Python\Python310\python.exe"
        )
        
        $pythonFound = $false
        foreach ($pythonPath in $pythonPaths) {
            try {
                if ($pythonPath -eq "python" -or $pythonPath -eq "py" -or $pythonPath -eq "python3") {
                    $pythonVersion = & $pythonPath --version 2>&1
                } else {
                    if (Test-Path $pythonPath) {
                        $pythonVersion = & $pythonPath --version 2>&1
                    } else {
                        continue
                    }
                }
                
                if ($pythonVersion -match "Python (\d+\.\d+\.\d+)") {
                    $version = $matches[1]
                    Write-ColorText "‚úÖ Python: $version (‡∏à‡∏≤‡∏Å $pythonPath)" "Success"
                    $script:PythonExecutable = $pythonPath
                    $pythonFound = $true
                    break
                }
            } catch {
                continue
            }
        }
        
        if (-not $pythonFound) {
            Write-ColorText "‚ùå Python ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" "Error"
            Write-ColorText "üí° ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python ‡∏à‡∏≤‡∏Å https://python.org" "Info"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå Python ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Error"
        return $false
    }
    
    # Check required files
    $requiredFiles = @(
        "src\server\universal_fs_mcp_server.py",
        "src\core\file_system_analyzer.py",
        "datasets\universal_mcp_config.json"
    )
    
    foreach ($file in $requiredFiles) {
        if (Test-Path $file) {
            Write-ColorText "‚úÖ $file" "Success"
        } else {
            Write-ColorText "‚ùå $file ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Error"
            return $false
        }
    }
    
    # Check dependencies
    try {
        $modules = @("asyncio", "requests", "pathlib")
        foreach ($module in $modules) {
            & $script:PythonExecutable -c "import $module" 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-ColorText "‚úÖ $module" "Success"
            } else {
                Write-ColorText "‚ö†Ô∏è  $module - ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á" "Warning"
            }
        }
    } catch {
        Write-ColorText "‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dependencies ‡πÑ‡∏î‡πâ" "Warning"
    }
    
    Write-Host ""
    return $true
}

function Start-MCPServer {
    Write-ColorText "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Universal MCP Server..." "Info"
    
    # Check if server is already running
    $processes = Get-Process -Name "python" -ErrorAction SilentlyContinue | Where-Object {
        $_.ProcessName -eq "python" -and $_.CommandLine -like "*universal_fs_mcp_server.py*"
    }
    
    if ($processes) {
        Write-ColorText "‚ö†Ô∏è  MCP Server ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà" "Warning"
        $response = Read-Host "‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà? (y/N)"
        if ($response -eq "y" -or $response -eq "Y") {
            foreach ($process in $processes) {
                Stop-Process -Id $process.Id -Force
                Write-ColorText "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î process: $($process.Id)" "Success"
            }
        } else {
            Write-ColorText "‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô" "Error"
            return
        }
    }
    
    try {
        Write-ColorText "üì° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server ‡∏ö‡∏ô stdin/stdout..." "Info"
        Write-ColorText "üí° ‡πÉ‡∏ä‡πâ Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î server" "Info"
        Write-Host ""
        
        # Start the server
        & $script:PythonExecutable src\server\universal_fs_mcp_server.py
        
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server: $($_.Exception.Message)" "Error"
    }
}

function Test-Platform {
    param([string]$Platform)
    
    Write-ColorText "üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°: $Platform" "Info"
    
    switch ($Platform) {
        "local" {
            Test-LocalPlatform
        }
        "cloud" {
            Test-CloudPlatform
        }
        "mobile" {
            Test-MobilePlatform
        }
        "network" {
            Test-NetworkPlatform
        }
        "all" {
            Test-LocalPlatform
            Test-CloudPlatform
            Test-MobilePlatform
            Test-NetworkPlatform
        }
    }
}

function Test-LocalPlatform {
    Write-ColorText "üñ•Ô∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Local Platform..." "SubHeader"
    
    # Test current directory
    $testPath = Get-Location
    Write-ColorText "   üìÅ Test path: $testPath" "Info"
    
    # Test file system info
    $drive = Get-PSDrive C -ErrorAction SilentlyContinue
    if ($drive) {
        Write-ColorText "   üíæ Drive C: $($drive.Used) / $($drive.Free) bytes" "Info"
    }
    
    # Test file operations
    try {
        $testFile = "test_universal_mcp.txt"
        "Test content" | Out-File -FilePath $testFile -Encoding UTF8
        if (Test-Path $testFile) {
            Write-ColorText "   ‚úÖ File creation test: PASS" "Success"
            Remove-Item $testFile -Force
        }
    } catch {
        Write-ColorText "   ‚ùå File creation test: FAIL" "Error"
    }
    
    Write-Host ""
}

function Test-CloudPlatform {
    Write-ColorText "‚òÅÔ∏è  ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Cloud Platform..." "SubHeader"
    
    # Check for cloud credentials
    $configFile = "datasets\universal_mcp_config.json"
    if (Test-Path $configFile) {
        try {
            $config = Get-Content $configFile | ConvertFrom-Json
            $cloudProviders = $config.supported_platforms.cloud.PSObject.Properties.Name
            Write-ColorText "   üìã ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Cloud Providers: $($cloudProviders -join ', ')" "Info"
        } catch {
            Write-ColorText "   ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô config file ‡πÑ‡∏î‡πâ" "Error"
        }
    } else {
        Write-ColorText "   ‚ùå Config file ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Error"
    }
    
    Write-ColorText "   ‚ö†Ô∏è  Cloud testing ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ credentials" "Warning"
    Write-Host ""
}

function Test-MobilePlatform {
    Write-ColorText "üì± ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Mobile Platform..." "SubHeader"
    
    # Check for mobile development tools
    $adbPath = Get-Command adb -ErrorAction SilentlyContinue
    if ($adbPath) {
        Write-ColorText "   ‚úÖ ADB (Android Debug Bridge) ‡∏û‡∏ö" "Success"
    } else {
        Write-ColorText "   ‚ö†Ô∏è  ADB ‡πÑ‡∏°‡πà‡∏û‡∏ö - Android testing ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°" "Warning"
    }
    
    # Check for iOS development tools (on macOS)
    if ($IsMacOS -or $env:OS -eq "Darwin") {
        $xcodePath = Get-Command xcodebuild -ErrorAction SilentlyContinue
        if ($xcodePath) {
            Write-ColorText "   ‚úÖ Xcode ‡∏û‡∏ö" "Success"
        } else {
            Write-ColorText "   ‚ö†Ô∏è  Xcode ‡πÑ‡∏°‡πà‡∏û‡∏ö - iOS testing ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°" "Warning"
        }
    } else {
        Write-ColorText "   ‚ÑπÔ∏è  iOS testing ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ macOS" "Info"
    }
    
    Write-Host ""
}

function Test-NetworkPlatform {
    Write-ColorText "üåê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Network Platform..." "SubHeader"
    
    # Test network connectivity
    try {
        $pingResult = Test-Connection -ComputerName "8.8.8.8" -Count 1 -Quiet
        if ($pingResult) {
            Write-ColorText "   ‚úÖ Network connectivity: PASS" "Success"
        } else {
            Write-ColorText "   ‚ùå Network connectivity: FAIL" "Error"
        }
    } catch {
        Write-ColorText "   ‚ùå Network connectivity: FAIL" "Error"
    }
    
    # Check for network tools
    $ftpClient = Get-Command ftp -ErrorAction SilentlyContinue
    if ($ftpClient) {
        Write-ColorText "   ‚úÖ FTP client ‡∏û‡∏ö" "Success"
    } else {
        Write-ColorText "   ‚ö†Ô∏è  FTP client ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Warning"
    }
    
    Write-Host ""
}

function Show-Configuration {
    Write-ColorText "‚öôÔ∏è  ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Universal MCP Server" "SubHeader"
    
    $configFile = "universal_mcp_config.json"
    if (Test-Path $configFile) {
        try {
            $config = Get-Content $configFile | ConvertFrom-Json
            
            Write-ColorText "üìã Server Info:" "Info"
            Write-ColorText "   Name: $($config.server_info.name)" "Info"
            Write-ColorText "   Version: $($config.server_info.version)" "Info"
            Write-ColorText "   Description: $($config.server_info.description)" "Info"
            
            Write-Host ""
            Write-ColorText "üîß Performance Settings:" "Info"
            Write-ColorText "   Max Concurrent Scans: $($config.performance_settings.max_concurrent_scans)" "Info"
            Write-ColorText "   Max File Size: $($config.performance_settings.max_file_size_mb) MB" "Info"
            Write-ColorText "   Timeout: $($config.performance_settings.timeout_seconds) seconds" "Info"
            
            Write-Host ""
            Write-ColorText "üîí Security Settings:" "Info"
            Write-ColorText "   Encrypt Credentials: $($config.security_settings.encrypt_credentials)" "Info"
            Write-ColorText "   Secure Connections Only: $($config.security_settings.secure_connections_only)" "Info"
            Write-ColorText "   Session Timeout: $($config.security_settings.session_timeout_minutes) minutes" "Info"
            
        } catch {
            Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô config file ‡πÑ‡∏î‡πâ: $($_.Exception.Message)" "Error"
        }
    } else {
        Write-ColorText "‚ùå Config file ‡πÑ‡∏°‡πà‡∏û‡∏ö: $configFile" "Error"
    }
    
    Write-Host ""
    Write-ColorText "üí° ‡πÉ‡∏ä‡πâ text editor ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç universal_mcp_config.json ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" "Info"
}

function Show-Help {
    Show-Header
    Show-PlatformInfo
    Show-ModeInfo
    
    Write-ColorText "üìñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:" "SubHeader"
    Write-ColorText "   .\start-universal.ps1                    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server" "Info"
    Write-ColorText "   .\start-universal.ps1 -Mode test         # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°" "Info"
    Write-ColorText "   .\start-universal.ps1 -Mode test -Platform local" "Info"
    Write-ColorText "   .\start-universal.ps1 -Mode config       # ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤" "Info"
    Write-ColorText "   .\start-universal.ps1 -Mode help         # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" "Info"
    
    Write-Host ""
    Write-ColorText "üîó Documentation:" "SubHeader"
    Write-ColorText "   üìÑ UNIVERSAL_MCP_README.md" "Info"
    Write-ColorText "   üìÑ universal_mcp_config.json" "Info"
    
    Write-Host ""
    Write-ColorText "üåê Features:" "SubHeader"
    Write-ColorText "   ‚Ä¢ Universal Directory Scanning" "Info"
    Write-ColorText "   ‚Ä¢ Cross-Platform File Search" "Info"
    Write-ColorText "   ‚Ä¢ Cloud Storage Integration" "Info"
    Write-ColorText "   ‚Ä¢ Mobile Storage Analysis" "Info"
    Write-ColorText "   ‚Ä¢ Network Storage Connection" "Info"
    Write-ColorText "   ‚Ä¢ UnicornX OS Integration" "Info"
}

# Main execution
Show-Header

switch ($Mode) {
    "server" {
        if (Test-Prerequisites) {
            Start-MCPServer
        } else {
            Write-ColorText "‚ùå Prerequisites ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" "Error"
            exit 1
        }
    }
    "test" {
        if (Test-Prerequisites) {
            Test-Platform -Platform $Platform
        } else {
            Write-ColorText "‚ùå Prerequisites ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" "Error"
            exit 1
        }
    }
    "config" {
        Show-Configuration
    }
    "help" {
        Show-Help
    }
    default {
        Write-ColorText "‚ùå ‡πÇ‡∏´‡∏°‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $Mode" "Error"
        Show-Help
        exit 1
    }
}

Write-Host ""
Write-ColorText "‚ú® Universal File System MCP Server - Complete!" "Success"
