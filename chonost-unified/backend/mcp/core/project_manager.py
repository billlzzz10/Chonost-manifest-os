#!/usr/bin/env python3
"""
Project Manager - ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
"""

import os
import json
import shutil
from pathlib import Path
from typing import Dict, List, Any, Optional
from datetime import datetime
import asyncio
import logging

class ProjectManager:
    """‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î"""
    
    def __init__(self, project_path: str = "."):
        self.project_path = Path(project_path).resolve()
        self.config = self._load_config()
        self.setup_logging()
        
    def setup_logging(self):
        """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ logging"""
        log_dir = self.project_path / "logs"
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(log_dir / f"project_manager_{datetime.now().strftime('%Y%m%d')}.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
    
    def _load_config(self) -> Dict[str, Any]:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        config_file = self.project_path / "project_config.json"
        
        default_config = {
            'project_name': 'FileSystemMCP',
            'project_description': 'MCP Server with File Management Tools',
            'structure': {
                'src': ['core', 'services', 'tools', 'utils'],
                'docs': ['api', 'guides', 'examples'],
                'tests': ['unit', 'integration', 'e2e'],
                'scripts': ['setup', 'deploy', 'maintenance'],
                'config': ['dev', 'prod', 'test']
            },
            'file_patterns': {
                'python': ['*.py', '*.pyc', '__pycache__'],
                'config': ['*.json', '*.yaml', '*.yml', '*.toml'],
                'docs': ['*.md', '*.txt', '*.rst'],
                'logs': ['*.log', 'logs/'],
                'temp': ['*.tmp', '*.temp', '.cache/']
            },
            'organize_rules': {
                'core': ['core', 'main', 'app', 'server'],
                'services': ['service', 'api', 'endpoint'],
                'tools': ['tool', 'utility', 'helper'],
                'utils': ['util', 'helper', 'common'],
                'config': ['config', 'settings', 'env'],
                'docs': ['readme', 'documentation', 'guide']
            }
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    user_config = json.load(f)
                    default_config.update(user_config)
            except Exception as e:
                logging.error(f"Error loading config: {e}")
        
        return default_config
    
    async def analyze_project(self) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ"""
        logging.info("üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ...")
        
        analysis = {
            'timestamp': datetime.now().isoformat(),
            'project_path': str(self.project_path),
            'structure': {},
            'files': {},
            'issues': [],
            'recommendations': []
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
        for folder_name in self.config['structure']:
            folder_path = self.project_path / folder_name
            if folder_path.exists():
                folder_info = await self._analyze_folder(folder_path)
                analysis['structure'][folder_name] = folder_info
            else:
                analysis['issues'].append(f"Missing folder: {folder_name}")
                analysis['recommendations'].append(f"Create folder: {folder_name}")
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
        scattered_files = await self._find_scattered_files()
        analysis['scattered_files'] = scattered_files
        
        if scattered_files:
            analysis['issues'].append(f"Found {len(scattered_files)} scattered files")
            analysis['recommendations'].append("Organize scattered files")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        management_files = await self._check_management_files()
        analysis['management_files'] = management_files
        
        missing_management = [f for f, exists in management_files.items() if not exists]
        if missing_management:
            analysis['issues'].extend([f"Missing {f}" for f in missing_management])
            analysis['recommendations'].extend([f"Create {f}" for f in missing_management])
        
        return analysis
    
    async def _analyze_folder(self, folder_path: Path) -> Dict[str, Any]:
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        files = list(folder_path.rglob("*"))
        python_files = [f for f in files if f.is_file() and f.suffix == '.py']
        config_files = [f for f in files if f.is_file() and f.suffix in ['.json', '.yaml', '.yml', '.toml']]
        doc_files = [f for f in files if f.is_file() and f.suffix in ['.md', '.txt', '.rst']]
        
        return {
            'path': str(folder_path),
            'file_count': len([f for f in files if f.is_file()]),
            'folder_count': len([f for f in files if f.is_dir()]),
            'python_files': len(python_files),
            'config_files': len(config_files),
            'doc_files': len(doc_files),
            'has_init': (folder_path / '__init__.py').exists(),
            'has_readme': any('readme' in f.name.lower() for f in doc_files)
        }
    
    async def _find_scattered_files(self) -> List[Dict[str, Any]]:
        """‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å"""
        scattered = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        for item in self.project_path.iterdir():
            if item.is_file() and item.name not in ['README.md', 'requirements.txt', 'setup.py', 'pyproject.toml']:
                scattered.append({
                    'path': str(item),
                    'name': item.name,
                    'suggested_location': self._suggest_location(item)
                })
        
        return scattered
    
    async def _check_management_files(self) -> Dict[str, bool]:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"""
        management_files = {
            'README.md': (self.project_path / 'README.md').exists(),
            'requirements.txt': (self.project_path / 'requirements.txt').exists(),
            'setup.py': (self.project_path / 'setup.py').exists(),
            'pyproject.toml': (self.project_path / 'pyproject.toml').exists(),
            '.gitignore': (self.project_path / '.gitignore').exists(),
            'project_config.json': (self.project_path / 'project_config.json').exists()
        }
        
        return management_files
    
    def _suggest_location(self, file_path: Path) -> str:
        """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå"""
        file_name = file_path.name.lower()
        
        for category, keywords in self.config['organize_rules'].items():
            for keyword in keywords:
                if keyword in file_name:
                    return f"src/{category}"
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÑ‡∏ü‡∏•‡πå
        if file_path.suffix == '.py':
            return 'src/core'
        elif file_path.suffix in ['.json', '.yaml', '.yml', '.toml']:
            return 'config'
        elif file_path.suffix in ['.md', '.txt', '.rst']:
            return 'docs'
        
        return 'src/utils'
    
    async def organize_project(self) -> Dict[str, Any]:
        """‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ"""
        logging.info("üèóÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ...")
        
        results = {
            'folders_created': [],
            'files_moved': [],
            'files_created': [],
            'errors': []
        }
        
        try:
            # 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            await self._create_folder_structure(results)
            
            # 2. ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
            await self._move_scattered_files(results)
            
            # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
            await self._create_management_files(results)
            
            # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
            await self._create_folder_readmes(results)
            
        except Exception as e:
            results['errors'].append(str(e))
            logging.error(f"Error organizing project: {e}")
        
        return results
    
    async def _create_folder_structure(self, results: Dict[str, Any]):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        for folder_name, subfolders in self.config['structure'].items():
            folder_path = self.project_path / folder_name
            if not folder_path.exists():
                folder_path.mkdir(parents=True, exist_ok=True)
                results['folders_created'].append(folder_name)
                logging.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_name}")
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
            for subfolder in subfolders:
                subfolder_path = folder_path / subfolder
                if not subfolder_path.exists():
                    subfolder_path.mkdir(parents=True, exist_ok=True)
                    results['folders_created'].append(f"{folder_name}/{subfolder}")
                    logging.info(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder_name}/{subfolder}")
    
    async def _move_scattered_files(self, results: Dict[str, Any]):
        """‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢"""
        scattered_files = await self._find_scattered_files()
        
        for file_info in scattered_files:
            try:
                source_path = Path(file_info['path'])
                target_folder = file_info['suggested_location']
                target_path = self.project_path / target_folder / source_path.name
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
                target_path.parent.mkdir(parents=True, exist_ok=True)
                
                # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
                if not target_path.exists():
                    shutil.move(str(source_path), str(target_path))
                    results['files_moved'].append({
                        'from': str(source_path),
                        'to': str(target_path)
                    })
                    logging.info(f"üìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå: {source_path.name} -> {target_folder}")
                else:
                    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥
                    counter = 1
                    while target_path.exists():
                        new_name = f"{source_path.stem}_{counter}{source_path.suffix}"
                        target_path = target_path.parent / new_name
                        counter += 1
                    
                    shutil.move(str(source_path), str(target_path))
                    results['files_moved'].append({
                        'from': str(source_path),
                        'to': str(target_path)
                    })
                    logging.info(f"üìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå: {source_path.name} -> {target_path.name}")
                    
            except Exception as e:
                results['errors'].append(f"Error moving {file_info['path']}: {e}")
    
    async def _create_management_files(self, results: Dict[str, Any]):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£"""
        management_files = await self._check_management_files()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md
        if not management_files['README.md']:
            readme_content = self._generate_readme()
            readme_path = self.project_path / 'README.md'
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(readme_content)
            results['files_created'].append('README.md')
            logging.info("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á README.md")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á .gitignore
        if not management_files['.gitignore']:
            gitignore_content = self._generate_gitignore()
            gitignore_path = self.project_path / '.gitignore'
            with open(gitignore_path, 'w', encoding='utf-8') as f:
                f.write(gitignore_content)
            results['files_created'].append('.gitignore')
            logging.info("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á .gitignore")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á project_config.json
        if not management_files['project_config.json']:
            config_path = self.project_path / 'project_config.json'
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, ensure_ascii=False, indent=2)
            results['files_created'].append('project_config.json')
            logging.info("üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á project_config.json")
    
    async def _create_folder_readmes(self, results: Dict[str, Any]):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        for folder_name in self.config['structure']:
            folder_path = self.project_path / folder_name
            if folder_path.exists():
                readme_path = folder_path / 'README.md'
                if not readme_path.exists():
                    readme_content = self._generate_folder_readme(folder_name)
                    with open(readme_path, 'w', encoding='utf-8') as f:
                        f.write(readme_content)
                    results['files_created'].append(f'{folder_name}/README.md')
                    logging.info(f"üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á README: {folder_name}")
    
    def _generate_readme(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á README.md"""
        return f"""# {self.config['project_name']}

{self.config['project_description']}

## üìÅ ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ

```
{self.project_path.name}/
‚îú‚îÄ‚îÄ src/                    # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å
‚îÇ   ‚îú‚îÄ‚îÄ core/              # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
‚îÇ   ‚îú‚îÄ‚îÄ services/          # ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
‚îÇ   ‚îú‚îÄ‚îÄ tools/             # ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠
‚îÇ   ‚îî‚îÄ‚îÄ utils/             # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
‚îú‚îÄ‚îÄ docs/                  # ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
‚îÇ   ‚îú‚îÄ‚îÄ api/               # API Documentation
‚îÇ   ‚îú‚îÄ‚îÄ guides/            # ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚îÇ   ‚îî‚îÄ‚îÄ examples/          # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
‚îú‚îÄ‚îÄ tests/                 # ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
‚îÇ   ‚îú‚îÄ‚îÄ unit/              # Unit Tests
‚îÇ   ‚îú‚îÄ‚îÄ integration/       # Integration Tests
‚îÇ   ‚îî‚îÄ‚îÄ e2e/               # End-to-End Tests
‚îú‚îÄ‚îÄ scripts/               # ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå
‚îÇ   ‚îú‚îÄ‚îÄ setup/             # ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á
‚îÇ   ‚îú‚îÄ‚îÄ deploy/            # ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå deploy
‚îÇ   ‚îî‚îÄ‚îÄ maintenance/       # ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤
‚îî‚îÄ‚îÄ config/                # ‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    ‚îú‚îÄ‚îÄ dev/               # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Development
    ‚îú‚îÄ‚îÄ prod/              # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production
    ‚îî‚îÄ‚îÄ test/              # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Testing
```

## üöÄ ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á

```bash
pip install -r requirements.txt
```

## üìñ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå `docs/`

## üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö

```bash
python -m pytest tests/
```

## üìù ‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤

1. ‡∏™‡∏£‡πâ‡∏≤‡∏á feature branch
2. ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö
3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Pull Request
4. ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡∏∞ merge

---
*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%Y-%m-%d')}*
"""
    
    def _generate_gitignore(self) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á .gitignore"""
        return """# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual Environment
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
logs/

# Temporary files
*.tmp
*.temp
.cache/

# OS
.DS_Store
Thumbs.db

# Project specific
project_config.json
"""
    
    def _generate_folder_readme(self, folder_name: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        folder_descriptions = {
            'src': '‡πÇ‡∏Ñ‡πâ‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ',
            'docs': '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            'tests': '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ',
            'scripts': '‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ',
            'config': '‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤'
        }
        
        description = folder_descriptions.get(folder_name, f'‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {folder_name}')
        
        return f"""# üìÅ {folder_name}

{description}

## üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
- [x] ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

## üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
{self._generate_file_list(self.project_path / folder_name)}

---
*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.now().strftime('%Y-%m-%d')}*
"""
    
    def _generate_file_list(self, folder_path: Path) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"""
        try:
            files = [f for f in folder_path.iterdir() if f.is_file() and f.name != 'README.md']
            if not files:
                return "- ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå"
            
            file_list = []
            for file in sorted(files):
                file_list.append(f"- {file.name}")
            
            return '\n'.join(file_list)
            
        except Exception as e:
            logging.error(f"Error generating file list: {e}")
            return "- ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå"
    
    async def display_analysis(self, analysis: Dict[str, Any]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        print("\n" + "="*80)
        print("üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ")
        print("="*80)
        
        print(f"\nüìÅ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:")
        print(f"   Path: {analysis['project_path']}")
        print(f"   Timestamp: {analysis['timestamp']}")
        
        if analysis['issues']:
            print(f"\n‚ùå ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
            for issue in analysis['issues']:
                print(f"   - {issue}")
        
        if analysis['recommendations']:
            print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
            for rec in analysis['recommendations']:
                print(f"   - {rec}")
        
        if analysis['scattered_files']:
            print(f"\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢:")
            for file_info in analysis['scattered_files']:
                print(f"   - {file_info['name']} -> {file_info['suggested_location']}")
        
        print(f"\nüìã ‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£:")
        for file_name, exists in analysis['management_files'].items():
            status = "‚úÖ" if exists else "‚ùå"
            print(f"   {status} {file_name}")
    
    async def display_organization_results(self, results: Dict[str, Any]):
        """‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö"""
        print("\n" + "="*80)
        print("üéâ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ")
        print("="*80)
        
        if results['folders_created']:
            print(f"\nüìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
            for folder in results['folders_created']:
                print(f"   ‚úÖ {folder}")
        
        if results['files_moved']:
            print(f"\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏¢‡πâ‡∏≤‡∏¢:")
            for move in results['files_moved']:
                print(f"   üìÅ {Path(move['from']).name} -> {Path(move['to']).parent.name}")
        
        if results['files_created']:
            print(f"\nüìù ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á:")
            for file in results['files_created']:
                print(f"   ‚úÖ {file}")
        
        if results['errors']:
            print(f"\n‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
            for error in results['errors']:
                print(f"   - {error}")

async def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á project manager
        manager = ProjectManager()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ
        analysis = await manager.analyze_project()
        await manager.display_analysis(analysis)
        
        # ‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        print("\n" + "="*80)
        response = input("‚ùì ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ")
        
        if response.lower() == 'y':
            # ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ
            results = await manager.organize_project()
            await manager.display_organization_results(results)
            
            print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡πá‡∏Ñ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        else:
            print("\n‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(asyncio.run(main()))
