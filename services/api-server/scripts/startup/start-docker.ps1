#!/usr/bin/env pwsh
<#
.SYNOPSIS
    Docker Launcher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Universal File System MCP Server
.DESCRIPTION
    ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Docker containers ‡∏Ç‡∏≠‡∏á Universal MCP Server
.PARAMETER Action
    ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥ (build, start, stop, restart, logs, shell, clean)
.PARAMETER Mode
    ‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (dev, prod)
.EXAMPLE
    .\start-docker.ps1 -Action build
    .\start-docker.ps1 -Action start -Mode prod
    .\start-docker.ps1 -Action logs
#>

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("build", "start", "stop", "restart", "logs", "shell", "clean", "status")]
    [string]$Action = "start",
    
    [Parameter(Mandatory=$false)]
    [ValidateSet("dev", "prod")]
    [string]$Mode = "dev"
)

# Color functions
function Write-ColorText {
    param(
        [string]$Text,
        [string]$Color = "White"
    )
    
    $Colors = @{
        "Success" = "Green"
        "Error" = "Red"
        "Warning" = "Yellow"
        "Info" = "Cyan"
        "Header" = "Magenta"
        "SubHeader" = "Blue"
    }
    
    $ColorCode = $Colors[$Color]
    if (-not $ColorCode) { $ColorCode = "White" }
    
    Write-Host $Text -ForegroundColor $ColorCode
}

function Show-Header {
    Write-ColorText "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" "Header"
    Write-ColorText "‚ïë           üê≥ Docker Universal File System MCP Server        ‚ïë" "Header"
    Write-ColorText "‚ïë                    Version 3.0.0 - Orion Senior Dev         ‚ïë" "Header"
    Write-ColorText "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" "Header"
    Write-Host ""
}

function Test-DockerPrerequisites {
    Write-ColorText "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Docker Prerequisites..." "Info"
    
    # Check if Docker is installed
    try {
        $dockerVersion = docker --version 2>&1
        if ($dockerVersion -match "Docker version") {
            Write-ColorText "‚úÖ Docker: $dockerVersion" "Success"
        } else {
            Write-ColorText "‚ùå Docker ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" "Error"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå Docker ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Error"
        Write-ColorText "üí° ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker Desktop ‡∏à‡∏≤‡∏Å https://docker.com" "Info"
        return $false
    }
    
    # Check if Docker is running
    try {
        $dockerInfo = docker info 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ Docker daemon ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" "Success"
        } else {
            Write-ColorText "‚ùå Docker daemon ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô" "Error"
            Write-ColorText "üí° ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Docker Desktop" "Info"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Docker daemon" "Error"
        return $false
    }
    
    # Check if docker-compose is available
    try {
        $composeVersion = docker-compose --version 2>&1
        if ($composeVersion -match "docker-compose version") {
            Write-ColorText "‚úÖ Docker Compose: $composeVersion" "Success"
        } else {
            Write-ColorText "‚ö†Ô∏è  Docker Compose ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡πÉ‡∏ä‡πâ docker compose ‡πÅ‡∏ó‡∏ô" "Warning"
        }
    } catch {
        Write-ColorText "‚ö†Ô∏è  Docker Compose ‡πÑ‡∏°‡πà‡∏û‡∏ö" "Warning"
    }
    
    Write-Host ""
    return $true
}

function Build-DockerImage {
    Write-ColorText "üî® ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Image..." "Info"
    
    try {
        docker build -t universal-fs-mcp:latest .
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Image ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Success"
        } else {
            Write-ColorText "‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Image ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" "Error"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Image: $($_.Exception.Message)" "Error"
        return $false
    }
    
    return $true
}

function Start-DockerContainer {
    Write-ColorText "üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Docker Container..." "Info"
    
    try {
        if ($Mode -eq "prod") {
            Write-ColorText "üì¶ ‡πÇ‡∏´‡∏°‡∏î Production" "Info"
            docker-compose up -d --build
        } else {
            Write-ColorText "üîß ‡πÇ‡∏´‡∏°‡∏î Development" "Info"
            docker-compose up --build
        }
        
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Container ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Success"
        } else {
            Write-ColorText "‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Container ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" "Error"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Container: $($_.Exception.Message)" "Error"
        return $false
    }
    
    return $true
}

function Stop-DockerContainer {
    Write-ColorText "üõë ‡∏´‡∏¢‡∏∏‡∏î Docker Container..." "Info"
    
    try {
        docker-compose down
        if ($LASTEXITCODE -eq 0) {
            Write-ColorText "‚úÖ ‡∏´‡∏¢‡∏∏‡∏î Container ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Success"
        } else {
            Write-ColorText "‚ùå ‡∏´‡∏¢‡∏∏‡∏î Container ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß" "Error"
            return $false
        }
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏¢‡∏∏‡∏î Container: $($_.Exception.Message)" "Error"
        return $false
    }
    
    return $true
}

function Show-DockerLogs {
    Write-ColorText "üìã ‡πÅ‡∏™‡∏î‡∏á Docker Logs..." "Info"
    
    try {
        docker-compose logs -f universal-mcp-server
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á logs: $($_.Exception.Message)" "Error"
    }
}

function Enter-DockerShell {
    Write-ColorText "üêö ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Docker Container..." "Info"
    
    try {
        docker exec -it universal-fs-mcp-server /bin/bash
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ Container: $($_.Exception.Message)" "Error"
    }
}

function Show-DockerStatus {
    Write-ColorText "üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Docker Containers..." "Info"
    
    try {
        docker-compose ps
        Write-Host ""
        docker stats --no-stream
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: $($_.Exception.Message)" "Error"
    }
}

function Clean-DockerResources {
    Write-ColorText "üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î Docker Resources..." "Info"
    
    try {
        # Stop and remove containers
        docker-compose down --volumes --remove-orphans
        
        # Remove images
        docker rmi universal-fs-mcp:latest -f
        
        # Remove unused resources
        docker system prune -f
        
        Write-ColorText "‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" "Success"
    } catch {
        Write-ColorText "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: $($_.Exception.Message)" "Error"
    }
}

function Show-Help {
    Show-Header
    
    Write-ColorText "üìñ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:" "SubHeader"
    Write-ColorText "   .\start-docker.ps1 -Action build              # ‡∏™‡∏£‡πâ‡∏≤‡∏á Docker Image" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action start              # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Container (dev)" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action start -Mode prod   # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Container (prod)" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action stop               # ‡∏´‡∏¢‡∏∏‡∏î Container" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action restart            # ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó Container" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action logs               # ‡πÅ‡∏™‡∏î‡∏á Logs" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action shell              # ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô Container" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action status             # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" "Info"
    Write-ColorText "   .\start-docker.ps1 -Action clean              # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î" "Info"
    
    Write-Host ""
    Write-ColorText "üîó Documentation:" "SubHeader"
    Write-ColorText "   üìÑ Dockerfile" "Info"
    Write-ColorText "   üìÑ docker-compose.yml" "Info"
    
    Write-Host ""
    Write-ColorText "üåê Features:" "SubHeader"
    Write-ColorText "   ‚Ä¢ Containerized MCP Server" "Info"
    Write-ColorText "   ‚Ä¢ Cross-platform Compatibility" "Info"
    Write-ColorText "   ‚Ä¢ Resource Management" "Info"
    Write-ColorText "   ‚Ä¢ Health Monitoring" "Info"
    Write-ColorText "   ‚Ä¢ Data Persistence" "Info"
}

# Main execution
Show-Header

if (-not (Test-DockerPrerequisites)) {
    Write-ColorText "‚ùå Docker Prerequisites ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" "Error"
    exit 1
}

switch ($Action) {
    "build" {
        Build-DockerImage
    }
    "start" {
        Start-DockerContainer
    }
    "stop" {
        Stop-DockerContainer
    }
    "restart" {
        Stop-DockerContainer
        Start-DockerContainer
    }
    "logs" {
        Show-DockerLogs
    }
    "shell" {
        Enter-DockerShell
    }
    "status" {
        Show-DockerStatus
    }
    "clean" {
        Clean-DockerResources
    }
    default {
        Write-ColorText "‚ùå ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: $Action" "Error"
        Show-Help
        exit 1
    }
}

Write-Host ""
Write-ColorText "‚ú® Docker Universal File System MCP Server - Complete!" "Success"

