#!/usr/bin/env python3
"""
Complete Vault Management - ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Vault ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î
"""

import os
import shutil
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

def analyze_old_structure() -> Dict[str, List[str]]:
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡πâ‡∏≤‡∏¢"""
    vault_path = r"F:\01_WRI\Obsidian\Vault"
    
    old_folders = {
        "08_TEMP": [],
        "copilot-conversations": [],
        "99_INBOX": []
    }
    
    for folder in old_folders.keys():
        folder_path = os.path.join(vault_path, folder)
        if os.path.exists(folder_path):
            files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
            old_folders[folder] = files
    
    return old_folders

def create_complete_structure():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á Vault ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î"""
    vault_path = r"F:\01_WRI\Obsidian\Vault"
    
    print("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Vault ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î")
    print("=" * 70)
    
    # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤
    print("\nüîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤...")
    old_structure = analyze_old_structure()
    
    for folder, files in old_structure.items():
        if files:
            print(f"üìÅ {folder}: {len(files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # 2. ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 08_TEMP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 08_Templates-Tools
    print("\nüìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 08_TEMP...")
    source_path = os.path.join(vault_path, "08_TEMP")
    target_base = os.path.join(vault_path, "08_Templates-Tools")
    
    if os.path.exists(source_path):
        # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        file_mapping = {
            # Document Templates
            "Character_Template.md": "Document_Templates/",
            "Character_Template_New.md": "Document_Templates/",
            "Scene_Template_New.md": "Document_Templates/",
            "Location_Template.md": "Document_Templates/",
            "template_location.md": "Document_Templates/",
            "PlotOutline.md": "Document_Templates/",
            "chapter_template.json": "Document_Templates/",
            "INDEX_Template.md": "Document_Templates/",
            "Template_YAML.md": "Document_Templates/",
            "SceneTemplate.md": "Document_Templates/",
            "AshvalTemplate.md": "Document_Templates/",
            "Draft-All-V3.md": "Document_Templates/",
            "DailyReport.md": "Document_Templates/",
            "Note.md": "Document_Templates/",
            "Locations.md": "Document_Templates/",
            
            # Tools and Utilities
            "APIHealthCheck.md": "Tools_and_Utilities/",
            "AshvalWriter.md": "Tools_and_Utilities/",
            "Automated Document Processing Template.md": "Tools_and_Utilities/",
            "Automated Scene Merger-V5.md.md": "Tools_and_Utilities/",
            "DuplicateFinder.md": "Tools_and_Utilities/",
            "FileRename.md": "Tools_and_Utilities/",
            "Find_Vault.md": "Tools_and_Utilities/",
            "Generat_Index_V2.md": "Tools_and_Utilities/",
            "Validator.md": "Tools_and_Utilities/",
            "renamev2.md": "Tools_and_Utilities/",
            "fix_bad_scene_model.md": "Tools_and_Utilities/",
            "Vault_Organization_Tool.md": "Tools_and_Utilities/",
            "File_Naming_Standards.md": "Tools_and_Utilities/",
            "extract_file_content.md": "Tools_and_Utilities/",
            "Conflict.md": "Tools_and_Utilities/",
            "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡∏≤‡∏ß.md": "Tools_and_Utilities/",
            "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏ü‡∏•‡πå‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô.md": "Tools_and_Utilities/",
            "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û.md": "Tools_and_Utilities/",
            "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏ûv11.md": "Tools_and_Utilities/",
            
            # Databases
            "ArcanaDatabase.md": "Databases/",
            
            # Prompts (‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ General ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
            "AshvalPrompt.md": "Prompts/General/",
            "Ashval Prompt Master.md": "Prompts/General/",
            "GeminiTagger.md": "Prompts/General/",
            "Summerize_Geminiv3.md": "Prompts/General/",
            "master_prompt.json": "Prompts/General/",
            "scene_prompt.json": "Prompts/General/",
            "scoring_prompt.json": "Prompts/General/",
        }
        
        moved_count = 0
        for file in os.listdir(source_path):
            if file in file_mapping:
                source_file = os.path.join(source_path, file)
                target_folder = os.path.join(target_base, file_mapping[file])
                target_file = os.path.join(target_folder, file)
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
                os.makedirs(target_folder, exist_ok=True)
                
                # ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå
                if not os.path.exists(target_file):
                    shutil.move(source_file, target_file)
                    print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢: {file} -> {file_mapping[file]}")
                    moved_count += 1
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {file}")
        
        print(f"üìä ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 08_TEMP: {moved_count} ‡πÑ‡∏ü‡∏•‡πå")
    
    # 3. ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å copilot-conversations ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Default_Prompts
    print("\nüìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å copilot-conversations...")
    source_path = os.path.join(vault_path, "copilot-conversations")
    target_path = os.path.join(vault_path, "08_Templates-Tools", "Prompts", "Default_Prompts")
    
    if os.path.exists(source_path):
        moved_count = 0
        for file in os.listdir(source_path):
            if file.endswith('.md') and file not in ['README.md']:
                source_file = os.path.join(source_path, file)
                target_file = os.path.join(target_path, file)
                
                if not os.path.exists(target_file):
                    shutil.move(source_file, target_file)
                    print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢: {file}")
                    moved_count += 1
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {file}")
        
        print(f"üìä ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å copilot-conversations: {moved_count} ‡πÑ‡∏ü‡∏•‡πå")
    
    # 4. ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 99_INBOX ‡πÑ‡∏õ‡∏¢‡∏±‡∏á 06_NOTE
    print("\nüìÅ ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 99_INBOX...")
    source_path = os.path.join(vault_path, "99_INBOX")
    target_path = os.path.join(vault_path, "06_NOTE")
    
    if os.path.exists(source_path):
        moved_count = 0
        for file in os.listdir(source_path):
            if file.endswith('.md') and file not in ['README.md', 'Dashboard.md']:
                source_file = os.path.join(source_path, file)
                target_file = os.path.join(target_path, file)
                
                if not os.path.exists(target_file):
                    shutil.move(source_file, target_file)
                    print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢: {file}")
                    moved_count += 1
                else:
                    print(f"‚ö†Ô∏è ‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {file}")
        
        print(f"üìä ‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å 99_INBOX: {moved_count} ‡πÑ‡∏ü‡∏•‡πå")
    
    # 5. ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
    print("\nüóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß...")
    old_folders = ["08_TEMP", "copilot-conversations", "99_INBOX"]
    
    for folder in old_folders:
        folder_path = os.path.join(vault_path, folder)
        if os.path.exists(folder_path):
            try:
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                remaining_files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f))]
                if not remaining_files:
                    shutil.rmtree(folder_path)
                    print(f"‚úÖ ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ß‡πà‡∏≤‡∏á: {folder}")
                else:
                    print(f"‚ö†Ô∏è ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå: {folder} ({len(remaining_files)} ‡πÑ‡∏ü‡∏•‡πå)")
            except Exception as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: {folder} - {e}")
    
    # 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
    print("\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á README ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á...")
    empty_folders = [
        "Document_Templates",
        "Tools_and_Utilities", 
        "Databases"
    ]
    
    for folder in empty_folders:
        folder_path = os.path.join(target_base, folder)
        readme_path = os.path.join(folder_path, "README.md")
        
        if not os.path.exists(readme_path):
            date = datetime.now().strftime("%Y-%m-%d")
            content = f"""# üìÅ {folder.replace('_', ' ')}

## üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
{folder.replace('_', ' ').lower()}

## üìã ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
- [ ] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å

---
*‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {date}*
"""
            with open(readme_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á README: {folder}")
    
    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Vault ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")

if __name__ == "__main__":
    create_complete_structure()
