"""
üì± Mobile Assistant Core System
‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mobile Assistant ‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Chonost
"""
import asyncio
import json
import sqlite3
from datetime import datetime
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from enum import Enum
import logging

logger = logging.getLogger(__name__)


class IntentType(Enum):
    GREETING = "greeting"
    QUESTION = "question"
    TASK_REQUEST = "task_request"
    SYSTEM_COMMAND = "system_command"
    CHAT = "chat"
    HELP = "help"
    UNKNOWN = "unknown"


@dataclass
class Intent:
    type: IntentType
    confidence: float
    entities: Dict[str, Any] = None
    context: Dict[str, Any] = None


@dataclass
class Message:
    id: str
    user_id: str
    content: str
    timestamp: datetime
    intent: Optional[Intent] = None
    response: Optional[str] = None


class IntentDetectionSystem:
    """‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Intent"""
    
    def __init__(self):
        self.intent_patterns = {
            IntentType.GREETING: ["hello", "hi", "hey", "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ", "‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ"],
            IntentType.QUESTION: ["what", "how", "why", "‡∏≠‡∏∞‡πÑ‡∏£", "‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£", "‡∏ó‡∏≥‡πÑ‡∏°"],
            IntentType.TASK_REQUEST: ["create", "make", "build", "‡∏™‡∏£‡πâ‡∏≤‡∏á", "‡∏ó‡∏≥"],
            IntentType.SYSTEM_COMMAND: ["stop", "status", "help", "‡∏´‡∏¢‡∏∏‡∏î", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
            IntentType.HELP: ["help", "support", "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠"]
        }
    
    async def detect_intent(self, message: str) -> Intent:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Intent ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        message_lower = message.lower()
        best_intent = IntentType.UNKNOWN
        best_confidence = 0.0
        
        for intent_type, patterns in self.intent_patterns.items():
            for pattern in patterns:
                if pattern in message_lower:
                    confidence = len(pattern) / len(message_lower)
                    if confidence > best_confidence:
                        best_confidence = confidence
                        best_intent = intent_type
        
        return Intent(type=best_intent, confidence=best_confidence)


class ConversationService:
    """‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤"""
    
    def __init__(self, db_path: str = "mobile_assistant.db"):
        self.db_path = db_path
        self.intent_detector = IntentDetectionSystem()
        self._init_database()
    
    def _init_database(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS conversations (
                    id TEXT PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    title TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    updated_at TEXT NOT NULL
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    id TEXT PRIMARY KEY,
                    conversation_id TEXT NOT NULL,
                    user_id TEXT NOT NULL,
                    content TEXT NOT NULL,
                    timestamp TEXT NOT NULL,
                    intent_type TEXT,
                    intent_confidence REAL,
                    response TEXT,
                    FOREIGN KEY (conversation_id) REFERENCES conversations (id)
                )
            """)
            conn.commit()
    
    async def create_conversation(self, user_id: str, title: str = None) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏´‡∏°‡πà"""
        import uuid
        conversation_id = str(uuid.uuid4())
        title = title or f"Conversation {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO conversations (id, user_id, title, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?)
            """, (
                conversation_id, user_id, title,
                datetime.now().isoformat(), datetime.now().isoformat()
            ))
            conn.commit()
        
        return conversation_id
    
    async def send_message(self, conversation_id: str, user_id: str, content: str) -> Message:
        """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"""
        import uuid
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Intent
        intent = await self.intent_detector.detect_intent(content)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
        response = await self._generate_response(intent, content)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        message_id = str(uuid.uuid4())
        message = Message(
            id=message_id,
            user_id=user_id,
            content=content,
            timestamp=datetime.now(),
            intent=intent,
            response=response
        )
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO messages 
                (id, conversation_id, user_id, content, timestamp, intent_type, intent_confidence, response)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                message.id, conversation_id, message.user_id, message.content,
                message.timestamp.isoformat(), message.intent.type.value,
                message.intent.confidence, message.response
            ))
            conn.commit()
        
        return message
    
    async def _generate_response(self, intent: Intent, content: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á"""
        if intent.type == IntentType.GREETING:
            return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Chonost Mobile Assistant"
        
        elif intent.type == IntentType.QUESTION:
            return f"‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: '{content}'\n\n‡∏ú‡∏°‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á..."
        
        elif intent.type == IntentType.TASK_REQUEST:
            return f"‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: {content}\n\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô..."
        
        elif intent.type == IntentType.SYSTEM_COMMAND:
            return "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
        
        elif intent.type == IntentType.HELP:
            return "ü§ñ **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô**\n\n- ‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤\n- ‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ\n- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô\n- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö"
        
        else:
            return "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°?"


class ChonostMobileIntegration:
    """‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏° Mobile Assistant ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Chonost"""
    
    def __init__(self):
        self.conversation_service = ConversationService()
    
    async def process_request(self, user_id: str, message: str, conversation_id: str = None) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏à‡∏≤‡∏Å Mobile"""
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
            if not conversation_id:
                conversation_id = await self.conversation_service.create_conversation(user_id)
            
            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            message_obj = await self.conversation_service.send_message(conversation_id, user_id, message)
            
            return {
                "conversation_id": conversation_id,
                "message_id": message_obj.id,
                "response": message_obj.response,
                "intent": {
                    "type": message_obj.intent.type.value,
                    "confidence": message_obj.intent.confidence
                },
                "timestamp": message_obj.timestamp.isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error processing request: {str(e)}")
            return {"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•"}


# Demo function
async def demo():
    """‡∏™‡∏≤‡∏ò‡∏¥‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"""
    print("üì± === Mobile Assistant Demo ===")
    
    integration = ChonostMobileIntegration()
    user_id = "user_123"
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    messages = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö",
        "‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á AI Agents ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
        "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"
    ]
    
    conversation_id = None
    
    for message in messages:
        print(f"\nUser: {message}")
        response = await integration.process_request(user_id, message, conversation_id)
        conversation_id = response['conversation_id']
        print(f"Assistant: {response['response']}")
        print(f"Intent: {response['intent']['type']} (confidence: {response['intent']['confidence']:.2f})")


if __name__ == "__main__":
    asyncio.run(demo())
