name: AI Code Review with GitHub Models

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  ai-review:
    if: |
      contains(github.event.comment.body, '@llama4') &&
      github.event.comment.user.login == 'billzzz10' &&
      (github.event.issue.pull_request != null || github.event.pull_request != null)

    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read
      issues: write

    steps:
      - name: Get PR Number
        id: pr-info
        run: |
          if [ "${{ github.event.issue.pull_request }}" != "" ]; then
            echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Get PR Details and Diff
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.pr-info.outputs.pr_number }};

            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            const maxFiles = 20;
            const maxPatchSize = 10000;

            let diffContent = '';
            diffContent += `Pull Request #${prNumber}: ${pr.title}\n\n`;
            diffContent += `Description: ${pr.body || 'No description provided'}\n\n`;
            diffContent += `Branch: ${pr.head.ref} ‚Üí ${pr.base.ref}\n`;
            diffContent += `Files changed: ${files.length}\n`;
            diffContent += `Additions: +${pr.additions} | Deletions: -${pr.deletions}\n\n`;
            diffContent += '---\n\n';

            const limitedFiles = files.slice(0, maxFiles);

            for (const file of limitedFiles) {
              diffContent += `File: ${file.filename}\n`;
              diffContent += `Status: ${file.status} | Changes: +${file.additions} -${file.deletions}\n\n`;

              if (file.patch) {
                const patch = file.patch.length > maxPatchSize 
                  ? file.patch.substring(0, maxPatchSize) + '\n... (truncated)'
                  : file.patch;
                diffContent += `${patch}\n\n`;
              } else {
                diffContent += '(Binary file or too large to display)\n\n';
              }
              diffContent += '---\n\n';
            }

            if (files.length > maxFiles) {
              diffContent += `Note: Showing first ${maxFiles} of ${files.length} files\n`;
            }

            const fs = require('fs');
            fs.writeFileSync('pr_diff.txt', diffContent);

            core.setOutput('pr_title', pr.title);
            core.setOutput('files_count', files.length);

      - name: Post Processing Comment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              body: 'ü§ñ **AI Code Review Starting...**\n\n‚è≥ Analyzing ${{ steps.pr-details.outputs.files_count }} file(s) with Llama 4 Maverick 17B...'
            });

      - name: Call GitHub Models API
        id: ai-review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          DIFF_CONTENT=$(cat pr_diff.txt)

          SYSTEM_PROMPT="You are an expert code reviewer. Analyze pull requests thoroughly and provide constructive feedback."

          USER_PROMPT="Please review this pull request and provide:

          1. **Summary**: Brief overview of the changes
          2. **Code Quality**: Assessment of code structure, readability, and maintainability
          3. **Potential Issues**: Bugs, logic errors, edge cases, or code smells
          4. **Security Concerns**: Any security vulnerabilities or risks
          5. **Performance**: Performance implications and optimization opportunities
          6. **Best Practices**: Adherence to coding standards and suggestions for improvement
          7. **Specific Feedback**: Detailed line-by-line comments where needed

          Format your response in clear markdown with sections and use emojis for better readability.

          Here are the changes:

          $DIFF_CONTENT"

          SYSTEM_JSON=$(jq -n --arg content "$SYSTEM_PROMPT" '{role: "system", content: $content}')
          USER_JSON=$(jq -n --arg content "$USER_PROMPT" '{role: "user", content: $content}')

          RESPONSE=$(curl -s -X POST \
            "https://models.inference.ai.azure.com/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d "{
              \"messages\": [$SYSTEM_JSON, $USER_JSON],
              \"model\": \"llama-4-maverick-17b-128e-instruct-fp8\",
              \"temperature\": 0.8,
              \"max_tokens\": 4096,
              \"top_p\": 0.1,
              \"presence_penalty\": 0
            }")

          echo "API Response received"

          REVIEW_CONTENT=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // empty')

          if [ -z "$REVIEW_CONTENT" ]; then
            echo "Error: No content in response"
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.error.message // "Unknown error"')
            echo "Error message: $ERROR_MSG"

            echo "review_result=‚ùå **Error**: Failed to get AI review. Error: $ERROR_MSG" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "review_result<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "‚úÖ Review completed successfully"

      - name: Post Review Results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const reviewResult = `${{ steps.ai-review.outputs.review_result }}`;

            let body = '## ü§ñ AI Code Review Results\n\n';

            if (reviewResult && reviewResult.trim() !== '' && !reviewResult.includes('Error:')) {
              body += reviewResult;
              body += '\n\n---\n';
              body += '**Model:** Llama 4 Maverick 17B 128E Instruct FP8\n';
              body += '**Platform:** GitHub Models\n';
              body += '\nüí° *Mention `@llama4` to request another review*';
            } else if (reviewResult && reviewResult.includes('Error:')) {
              body += reviewResult;
              body += '\n\n---\n';
              body += '**Troubleshooting:**\n';
              body += '- Ensure GitHub Models is enabled for this repository\n';
              body += '- Check if you have access to the model\n';
              body += '- Try mentioning the bot again\n';
            } else {
              body += '‚ö†Ô∏è **Unexpected Error**\n\n';
              body += 'The AI review could not be completed. Please check the workflow logs or try again.';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.pr-info.outputs.pr_number }},
              body: body
            });